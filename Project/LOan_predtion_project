{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing required Packages\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read Test and Train\n",
    "train=pd.read_csv(r\"C:\\Users\\ajay\\Downloads\\Predict_Loan_Using_Machine_Learning_Algorithms_in_Python-master\\Predict_Loan_Using_Machine_Learning_Algorithms_in_Python-master\\Predict_Loan\\Data_Source\\train_file_loan.csv\")\n",
    "test=pd.read_csv(r\"C:\\Users\\ajay\\Downloads\\Predict_Loan_Using_Machine_Learning_Algorithms_in_Python-master\\Predict_Loan_Using_Machine_Learning_Algorithms_in_Python-master\\Predict_Loan\\Data_Source\\test_file_loan.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Copy of original data\n",
    "train_original=train.copy()\n",
    "test_original=test.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Index(['Loan_ID', 'Gender', 'Married', 'Dependents', 'Education',\n",
       "        'Self_Employed', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount',\n",
       "        'Loan_Amount_Term', 'Credit_History', 'Property_Area', 'Loan_Status'],\n",
       "       dtype='object'),\n",
       " Index(['Loan_ID', 'Gender', 'Married', 'Dependents', 'Education',\n",
       "        'Self_Employed', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount',\n",
       "        'Loan_Amount_Term', 'Credit_History', 'Property_Area'],\n",
       "       dtype='object'))"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Features in the dataset\n",
    "train.columns, test.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Loan_ID               0\n",
       "Gender               13\n",
       "Married               3\n",
       "Dependents           15\n",
       "Education             0\n",
       "Self_Employed        32\n",
       "ApplicantIncome       0\n",
       "CoapplicantIncome     0\n",
       "LoanAmount           22\n",
       "Loan_Amount_Term     14\n",
       "Credit_History       50\n",
       "Property_Area         0\n",
       "Loan_Status           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Loan_ID               object\n",
       "Gender                object\n",
       "Married               object\n",
       "Dependents            object\n",
       "Education             object\n",
       "Self_Employed         object\n",
       "ApplicantIncome        int64\n",
       "CoapplicantIncome    float64\n",
       "LoanAmount           float64\n",
       "Loan_Amount_Term     float64\n",
       "Credit_History       float64\n",
       "Property_Area         object\n",
       "Loan_Status           object\n",
       "dtype: object"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Print data types for each variable\n",
    "train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((614, 13), (367, 12))"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Shape of the dataset\n",
    "train.shape, test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LP001002</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>5849</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>LP001003</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>4583</td>\n",
       "      <td>1508.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>LP001005</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>LP001006</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2583</td>\n",
       "      <td>2358.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>LP001008</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>6000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
       "0  LP001002   Male      No          0      Graduate            No   \n",
       "1  LP001003   Male     Yes          1      Graduate            No   \n",
       "2  LP001005   Male     Yes          0      Graduate           Yes   \n",
       "3  LP001006   Male     Yes          0  Not Graduate            No   \n",
       "4  LP001008   Male      No          0      Graduate            No   \n",
       "\n",
       "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "0             5849                0.0         NaN             360.0   \n",
       "1             4583             1508.0       128.0             360.0   \n",
       "2             3000                0.0        66.0             360.0   \n",
       "3             2583             2358.0       120.0             360.0   \n",
       "4             6000                0.0       141.0             360.0   \n",
       "\n",
       "   Credit_History Property_Area Loan_Status  \n",
       "0             1.0         Urban           Y  \n",
       "1             1.0         Rural           N  \n",
       "2             1.0         Urban           Y  \n",
       "3             1.0         Urban           Y  \n",
       "4             1.0         Urban           Y  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Univariate analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Y    422\n",
       "N    192\n",
       "Name: Loan_Status, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Loan_Status'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Male      81.364393\n",
       "Female    18.635607\n",
       "Name: Gender, dtype: float64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Normalize can be set to True to print proportions instead of number \n",
    "train['Loan_Status'].value_counts(normalize=True)\n",
    "train.Gender.value_counts(normalize = True)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7b163d4988>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['Loan_Status'].value_counts().plot.bar()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing categorical features\n",
    "plt.figure(1)\n",
    "plt.subplot(221)\n",
    "train['Gender'].value_counts(normalize=True).plot.bar(figsize=(20,10), title= 'Gender')\n",
    "\n",
    "plt.subplot(222)\n",
    "train['Married'].value_counts(normalize=True).plot.bar(title= 'Married')\n",
    "\n",
    "plt.subplot(223)\n",
    "train['Dependents'].value_counts(normalize=True).plot.bar(title= 'Dependents')\n",
    "\n",
    "plt.subplot(224)\n",
    "train['Education'].value_counts(normalize=True).plot.bar(title= 'Education')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7b16b02c08>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(221)\n",
    "train['Gender'].value_counts(normalize=True).plot.bar(figsize=(20,10), title= 'Gender')\n",
    "\n",
    "plt.subplot(222)\n",
    "train['Married'].value_counts(normalize=True).plot.bar(title= 'Married')\n",
    "\n",
    "plt.subplot(223)\n",
    "train['Dependents'].value_counts(normalize=True).plot.bar(title = 'Dependents')\n",
    "\n",
    "plt.subplot(224)\n",
    "train['Education'].value_counts(normalize = True).plot.bar(title = 'Education')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-39-dd36d503baf0>, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-39-dd36d503baf0>\"\u001b[1;36m, line \u001b[1;32m3\u001b[0m\n\u001b[1;33m    train['Self_Employed'].value_counts(normalize = True).0p1lot.bar(title = 'Self_Employed')\u001b[0m\n\u001b[1;37m                                                          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "plt.figure(figsize=(8,8))\n",
    "plt.subplot(221)\n",
    "train['Self_Employed'].value_counts(normalize = True).0p1lot.bar(title = 'Self_Employed')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualizing remaining categorical features\n",
    "plt.figure(1)\n",
    "plt.subplot(131)\n",
    "train['Self_Employed'].value_counts(normalize=True).plot.bar(figsize=(20,6), title= 'Self_Employed')\n",
    "\n",
    "plt.subplot(132)\n",
    "train['Credit_History'].value_counts(normalize=True).plot.bar(title= 'Credit_History')\n",
    "\n",
    "plt.subplot(133)\n",
    "train['Property_Area'].value_counts(normalize=True).plot.bar(title= 'Property_Area')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualizing numerical features\n",
    "plt.figure(1)\n",
    "plt.subplot(121)\n",
    "sns.distplot(train['ApplicantIncome']);\n",
    "\n",
    "plt.subplot(122)\n",
    "train['ApplicantIncome'].plot.box(figsize=(16,5))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train.boxplot(column='ApplicantIncome', by = 'Education')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(15,8))\n",
    "plt.subplot(221)\n",
    "sns.distplot(train['ApplicantIncome'])\n",
    "\n",
    "plt.subplot(221)\n",
    "train.boxplot(column='ApplicantIncome', by='Self_Employed')\n",
    "\n",
    "\n",
    "\n",
    "#chekcing kurtosis and skweness in our data set\n",
    "\n",
    "print(train['ApplicantIncome'].skew())\n",
    "print(train['ApplicantIncome'].kurtosis())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ApplicantIncome      6.539513\n",
       "CoapplicantIncome    7.491531\n",
       "LoanAmount           2.677552\n",
       "Loan_Amount_Term    -2.362414\n",
       "Credit_History      -1.882361\n",
       "dtype: float64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.skew()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'seaborn' has no attribute 'displot'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-41-2b459032243b>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m121\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0msns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdisplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'LoanAmount'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m122\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: module 'seaborn' has no attribute 'displot'"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(1)\n",
    "plt.subplot(121)\n",
    "sns.displot(train['LoanAmount'])\n",
    "\n",
    "plt.subplot(122)\n",
    "sns.dis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(1)\n",
    "plt.subplot(121)\n",
    "sns.distplot(train['CoapplicantIncome']);\n",
    "\n",
    "plt.subplot(122)\n",
    "train['CoapplicantIncome'].plot.box(figsize=(16,5))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(1)\n",
    "plt.subplot(121)\n",
    "df=train.dropna()\n",
    "sns.distplot(df['LoanAmount']);\n",
    "\n",
    "plt.subplot(122)\n",
    "train['LoanAmount'].plot.box(figsize=(16,5))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bivariate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loan_Status    N    Y\n",
      "Gender               \n",
      "Female        37   75\n",
      "Male         150  339\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(pd.crosstab(train['Gender'],train['Loan_Status']))\n",
    "\n",
    "Gender=pd.crosstab(train['Gender'],train['Loan_Status'])\n",
    "Gender.div(Gender.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize=(4,4))\n",
    "plt.xlabel('Gender')\n",
    "p = plt.ylabel('Percentage')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7b1406b408>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "store = pd.crosstab(train['Gender'], train['Loan_Status'])\n",
    "store.plot.bar()\n",
    "store.div(store.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize=(4,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Loan_Status</th>\n",
       "      <th>N</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Self_Employed</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>No</td>\n",
       "      <td>157</td>\n",
       "      <td>343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Yes</td>\n",
       "      <td>26</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Loan_Status      N    Y\n",
       "Self_Employed          \n",
       "No             157  343\n",
       "Yes             26   56"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(train['Self_Employed'], train['Loan_Status'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loan_Status    N    Y\n",
      "Married              \n",
      "No            79  134\n",
      "Yes          113  285\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(pd.crosstab(train['Married'],train['Loan_Status']))\n",
    "\n",
    "Married=pd.crosstab(train['Married'],train['Loan_Status'])\n",
    "Married.div(Married.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize=(4,4))\n",
    "plt.xlabel('Married')\n",
    "p = plt.ylabel('Percentage')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loan_Status    N    Y\n",
      "Dependents           \n",
      "0            107  238\n",
      "1             36   66\n",
      "2             25   76\n",
      "3+            18   33\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(pd.crosstab(train['Dependents'],train['Loan_Status']))\n",
    "\n",
    "Dependents=pd.crosstab(train['Dependents'],train['Loan_Status'])\n",
    "Dependents.div(Dependents.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)\n",
    "plt.xlabel('Dependents')\n",
    "p = plt.ylabel('Percentage')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loan_Status     N    Y\n",
      "Education             \n",
      "Graduate      140  340\n",
      "Not Graduate   52   82\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAARIAAAFACAYAAABwcfPfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAcy0lEQVR4nO3deZxWdd3/8dcbkEU2WcYFBgSNLMQFmtsNUwlL+OXSoihmxJ2/Rssl0xZNS256dN9upVIWopTLz1Qw7YZcKLsRM1dQpMBMUouJfqioyCIK+Ln/ONfgxTDDXDNnzpy5mvfz8ZgH1/ecc535zMJ7vuec7/keRQRmZml0yLsAMyt/DhIzS81BYmapOUjMLDUHiZml5iAxs9Q65V1AU/Xv3z+GDBmSdxlm7c6iRYtei4iK+taVXZAMGTKEhQsX5l2GWbsj6W8NrfOhjZml5iAxs9QcJGaWWtmdIzHLwqZNm6ipqWHjxo15l5K7rl27UllZyU477VTyexwkZkBNTQ09e/ZkyJAhSMq7nNxEBKtXr6ampoahQ4eW/L7MDm0k/UzSK5L+1MB6SZomabmkJZJGZVWLWWM2btxIv3792nWIAEiiX79+Te6ZZXmO5CZg3A7WjweGFT6qgZ9mWItZo9p7iNRqzvchsyCJiIeB13ewyQnALZF4HNhF0h5Z1WNm2cnzHMlAYEVRu6aw7J91N5RUTdJrYfDgwa1S3FZTerfu52ttU9bkXUG2Sv35HTMLVm7bne8xbDTrXvhDBkU17PvX3sgvfvUAHTt2oIM6cP3lF3PwqP245obbqD7tM+zcrdv7Gw8Yud37r7nmGqqrq9l5551bsep8L//W13+qd7q2iJgREVURUVVRUe8IXbOy99jCZ/n1g7/n6Qd+wZIHZ/HgnT9l0IDdAbjmxl+w4e3Gz1tcc801bNiwIetSt5NnkNQAg4ralcDKnGoxK8nfalYydsIZ7H/0BMZOOIO//yPpQM/9zQIOPnYSIz8xkaNPPpNVr64GYMoPpvPF86dw1IlfYq9Dj2PazNsb3Pc/X3mN/n13oUuXzgD079uHAbtXMG3m7axc9SpjTjqDMSdWA/DlC/+Tqqoq9t13Xy699FIApk2bxsqVKxkzZgxjxowBoEePHlv3f9dddzF58mQAZs+ezYgRIzjggAM44ogjUn9f8gySOcCkwtWbQ4A1EbHdYY1ZW3L2xZcz6cRjWfLgLD73mfGc+50rATj8oJE8PvdmnvnN7ZxywjFc8ZObt77nz8tfZt5t1/HkvbfwHz+cwaZNm+rd9yeOPJQVK1fxwcM/xVcu+i8WPLYIgHNPn8iA3SqYP/t65t81A4Dvf+ssFi5cyJIlS1iwYAFLlizh3HPPZcCAAcyfP5/58+fv8OuYOnUq8+bN49lnn2XOnDmpvy9ZXv69HXgM2EdSjaTTJZ0p6czCJvcBLwLLgRuAr2RVi1lLeWzRHzn108nFyM9/9pM88uRiAGr+uYpjTj2L/cZO4Mqf3sLSv/x163s+OfZwunTpTP++fdi1fx9WvVr/NYge3Xdm0QO3MeOKS6jotwsnf/lCbrqz/v/ks+b+llGjRjFy5EiWLl3KsmXLmvR1jB49msmTJ3PDDTewZcuWJr23PpmdbI2IiY2sD+CsrD6/WWuovVJ6zneu4Pzq0zj+E0fy0KMLmfLD67duU3uoAtCxY0c27+A/bseOHTnqsCqOOqyK/T40jJtnz2Xyycdvs81Lf/8HV11/C089vYQ+ffowefLkBsd9FF/KLd5m+vTpPPHEE9x7770ceOCBLF68mH79+jXpay/me23MmuCwqv2547/nAXDb3fdz+EHJlZM1b61j4O7JhYCbZ89t1r6fX/4yL7z4963txUufZ8/KZEREzx7dWbsuOYn61tr1dO/Wjd69e7Nq1Sruv//+re/p2bMna9eu3drebbfdeO6553jvvfe45557ti7/61//ysEHH8zUqVPp378/K1YUX0BtOg+RN2vAhrc3UvmR98dUnl99GtO+902+eP4Urpx+CxV9+/Dzq6cAMOWCMzjpjG8xcPcKDhm1Hy+taPp1g3UbNnDOJVfw5ltr6dSpIx8YMogZV1wCQPXnPsP4085hj137M/+uGYwc8SH23Xdf9tprL0aPHr11H9XV1YwfP5499tiD+fPnc9lll3HssccyaNAgRowYwbp16wD4xje+wQsvvEBEMHbsWA444IAU3ylQuT0gq6qqKlp1YiOPIylvJf78njtmFh/ec9eMi2lh9YwjaSnPPfccH/7wh7dZJmlRRFTVt70PbcwsNR/amLWy1a+/ydiTz9xu+e/unE6/vrvkUFF6DhKzVtav7y4s/u0deZfRonxoY2apOUjMLDUHiZml5iAxK1OSuOCCC7a2r7rqKqZMmZJLLT7ZatYChkxr2RvXXz53QKPbdOnShbvvvpuLLrqI/v37t+jnbyr3SMzKVKdOnaiurubqq6/OuxQHiVk5O+uss7jttttYsybfEcoOErMy1qtXLyZNmsS0adNyrcNBYlbmzjvvPGbOnMn69etzq8FBYlbm+vbty4QJE5g5c2ZuNThIzP4FXHDBBbz22mu5fX5f/jVrAaVcrm1ptXOLQDKBUR6zx9dyj8TMUnOQmFlqDhIzS81BYmapOUjMLDUHiZml5iAxK0MRweGHH77NM21mzZrFuHHjdvCu7HgciVlLmHFUy+6v+qEdrpbE9OnTOemkkxgzZgxbtmzh4osv5oEHHmjZOkrkIDErUyNGjOC4447j8ssvZ/369UyaNIm99947l1ocJGZl7NJLL2XUqFF07tyZVn1wXB0OErMy1r17d04++WR69OhBly5dcqvDJ1vNylyHDh3o0CHf/8oOEjNLzUFiZqlleo5E0jjgWqAjcGNEXFZn/WDgZmCXwjYXRsR9WdZklonqh3L71Hk9gqJYZj0SSR2B64DxwHBgoqThdTa7BJgVESOBU4CfZFWPmWUny0Obg4DlEfFiRLwL3AGcUGebAHoVXvcGWvbhIGbWKrI8tBkIrChq1wAH19lmCvAbSecA3YGjM6zHzDKSZY9E9SyLOu2JwE0RUQn8H+BWSdvVJKla0kJJC1999dUMSjULIur+erZPzfk+ZBkkNcCgonYl2x+6nA7MAoiIx4CuwHbPHoyIGRFRFRFVFRUVGZVr7VnXNS+yev3mdh8mEcHq1avp2rVrk96X5aHNU8AwSUOBf5CcTD21zjZ/B8YCN0n6MEmQuMthra7y6cup4Vu82nsv6u9Mt0Frnstkt127dqWysrJJ78ksSCJis6SzgXkkl3Z/FhFLJU0FFkbEHOAC4AZJXyM57Jkc7f1PguVip3ffZOjjF+VdRtNMyfcxncUyHUdSGBNyX51l3y16vQwYnWUNZpY9j2w1s9QcJGaWmoPEzFJzkJhZag4SM0vNQWJmqTlIzCw1B4mZpeYgMbPUHCRmlpqDxMxSc5CYWWoOEjNLzUFiZqk5SMwsNQeJmaXmIDGz1BwkZpaag8TMUnOQmFlqDhIzS81BYmapOUjMLDUHiZml5iAxs9RKDhJJ3STtk2UxZlaeSgoSSccBi4EHCu0DJc3JsjAzKx+l9kimAAcBbwJExGJgSDYlmVm5KTVINkdE23n0uZm1KZ1K3O5Pkk4FOkoaBpwLPJpdWWZWTkrtkZwD7Au8A9wOvAWcl1VRZlZeSuqRRMQG4OLCh5nZNkoKEklzgaizeA2wELg+IjY28L5xwLVAR+DGiLisnm0mkJzMDeDZiDi15OrNrE0o9RzJi0AFyWENwMnAKuCDwA3A5+u+QVJH4Drg40AN8JSkORGxrGibYcBFwOiIeEPSrs39QswsP6UGyciIOKKoPVfSwxFxhKSlDbznIGB5RLwIIOkO4ARgWdE2XwKui4g3ACLilaaVb2ZtQaknWyskDa5tFF73LzTfbeA9A4EVRe2awrJiHwQ+KOkPkh4vHAqZWZkptUdyAfCIpL8CAoYCX5HUHbi5gfeonmV1z7N0AoYBRwGVwO8ljYiIN7fZkVQNVAMMHjwYM2tbSr1qc1/hfMaHSALiz0UnWK9p4G01wKCidiWwsp5tHo+ITcBLkp4nCZan6nz+GcAMgKqqqrphZGY5a8rdv8OAfYD9gQmSJjWy/VPAMElDJXUGTgHq3p/zK2AMgKT+JIc6LzahJjNrA0q9/HspyeHHcOA+YDzwCHBLQ++JiM2SzgbmkVz+/VlELJU0FVgYEXMK6z4haRmwBfhGRKxO8fWYWQ5KPUdyInAA8ExE/Luk3YAbG3tTRNxHEjzFy75b9DqA8wsfZlamSj20eTsi3gM2S+oFvALslV1ZZlZOSu2RLJS0C8ngs0XAOuDJzKoys7JS6lWbrxReTpf0ANArIpZkV5aZlZNSZ0j7Xe3riHg5IpYULzOz9m2HPRJJXYGdgf6S+vD+ILNewICMazOzMtHYoc0ZJPOODCA5N1IbJG+R3JBnZrbjIImIa4FrJZ0TET9qpZrMrMyUerL1R5IOI5nwuVPR8gYHpJlZ+1HqyNZbgb1JHkmxpbA42MHIVjNrP0odR1IFDC+MRDUz20apI1v/BOyeZSFmVr5K7ZH0B5ZJepJkJnkAIuL4TKoys7JSapBMybIIMytvpV61WSBpT2BYRDwoaWeSqQHMzEoeIv8l4C7g+sKigSSTEpmZlXyy9SxgNMmIViLiBcCPjjAzoPQgeScits4WL6kT20/kbGbtVKlBskDSt4Fukj4OzAbmZleWmZWTUoPkQuBV4I8kN/LdB1ySVVFmVl5KvfzbjWTy5htg6+M4uwEbsirMzMpHqT2S35EER61uwIMtX46ZlaNSg6RrRKyrbRRe75xNSWZWbkoNkvWSRtU2JH0EeDubksys3JR6juSrwGxJtY/c3AM4OZuSzKzcNBokkjoAnUme+7sP7z/7d1PGtZlZmWg0SCLiPUk/iIhDSaYTMDPbRqnnSH4j6bOS1PimZtbelHqO5HygO7BF0tskhzcREb0yq8zMykap0wj0zLoQMytfpU4jIEmnSfpOoT1I0kHZlmZm5aLUcyQ/AQ4FTi201+EHZJlZQannSA6OiFGSngGIiDckdc6wLjMrI6X2SDYVbtQLAEkVwHuZVWVmZaXUIJkG3APsKun7wCPAfzb2JknjJD0vabmkC3ew3YmSQlJVifWYWRtS6lWb2yQtAsaSXPr9VEQ8t6P3FHow1wEfB2qApyTNiYhldbbrCZwLPNGM+s2sDdhhkEjqCpwJfIBkUqPrI2Jzifs+CFgeES8W9nUHcAKwrM523wOuAL7ehLrNrA1p7NDmZpLHdf4RGA9c1YR9DwRWFLVrCsu2kjQSGBQRv27Cfs2sjWns0GZ4ROwHIGkm8GQT9l3fcPqtE0YXbga8Gpjc6I6kaqAaYPDgwU0owcxaQ2M9kq13+DbhkKZWDTCoqF0JrCxq9wRGAA9Jehk4BJhT3wnXiJgREVURUVVRUdHEMswsa431SA6Q9FbhtUhmkX+L0u61eQoYJmko8A/gFN4f0EZErCF5pnCyc+kh4OsRsbDJX4VZA4Zs/EXeJWTm5bwLKLLDIImIZj+WMyI2SzobmEfyeM+fRcRSSVOBhRExp7n7NrO2pdSRrc0SEfeRPLqieNl3G9j2qCxrMbPslDogzcysQQ4SM0vNQWJmqTlIzCw1B4mZpeYgMbPUHCRmlpqDxMxSc5CYWWoOEjNLzUFiZqk5SMwsNQeJmaXmIDGz1BwkZpaag8TMUnOQmFlqmc6Q9q/gX3nOT2hb835a+XKPxMxSc5CYWWoOEjNLzUFiZqk5SMwsNQeJmaXmIDGz1BwkZpaag8TMUnOQmFlqDhIzS81BYmapOUjMLDUHiZmllmmQSBon6XlJyyVdWM/68yUtk7RE0u8k7ZllPWaWjcyCRFJH4DpgPDAcmChpeJ3NngGqImJ/4C7giqzqMbPsZNkjOQhYHhEvRsS7wB3ACcUbRMT8iNhQaD4OVGZYj5llJMsgGQisKGrXFJY15HTg/gzrMbOMZDnVoupZFvVuKJ0GVAFHNrC+GqgGGDx4cEvVZ2YtJMseSQ0wqKhdCaysu5Gko4GLgeMj4p36dhQRMyKiKiKqKioqMinWzJovyyB5ChgmaaikzsApwJziDSSNBK4nCZFXMqzFzDKUWZBExGbgbGAe8BwwKyKWSpoq6fjCZlcCPYDZkhZLmtPA7sysDcv0cRQRcR9wX51l3y16fXSWn9/MWodHtppZag4SM0vNQWJmqTlIzCw1B4mZpeYgMbPUHCRmlpqDxMxSc5CYWWoOEjNLzUFiZqk5SMwsNQeJmaXmIDGz1BwkZpaag8TMUnOQmFlqDhIzS81BYmapOUjMLDUHiZml5iAxs9QcJGaWmoPEzFJzkJhZag4SM0vNQWJmqTlIzCw1B4mZpeYgMbPUHCRmlpqDxMxSc5CYWWqZBomkcZKel7Rc0oX1rO8i6c7C+ickDcmyHjPLRmZBIqkjcB0wHhgOTJQ0vM5mpwNvRMQHgKuBy7Oqx8yyk2WP5CBgeUS8GBHvAncAJ9TZ5gTg5sLru4CxkpRhTWaWgU4Z7nsgsKKoXQMc3NA2EbFZ0hqgH/Ba8UaSqoHqQnOdpOczqbht6E+drz9Lch+wJf2r/+z2bGhFlkFSX88imrENETEDmNESRbV1khZGRFXedVjTteefXZaHNjXAoKJ2JbCyoW0kdQJ6A69nWJOZZSDLIHkKGCZpqKTOwCnAnDrbzAG+UHh9IvA/EbFdj8TM2rbMDm0K5zzOBuYBHYGfRcRSSVOBhRExB5gJ3CppOUlP5JSs6ikj7eIQ7l9Uu/3ZyR0AM0vLI1vNLDUHiZml5iAxs9QcJGbNJGk3STMl3V9oD5d0et515cFB0gZI2lPS0YXX3ST1zLsmK8lNJFclBxTafwHOy62aHDlIcibpSyT3GV1fWFQJ/Cq/iqwJ+kfELOA9SIY8AFvyLSkfDpL8nQWMBt4CiIgXgF1zrchKtV5SPwq3dUg6BFiTb0n5yPJeGyvNOxHxbu1Nz4VbBTy4pzycTzI6e29JfwAqgJPyLSkfDpL8LZD0baCbpI8DXwHm5lyTlWYpcCSwD8kNqM/TTnv5HtmaM0kdSCZ4+gTJL+O8iLgh36qsFJKejohRjS1rD9wjyd85EXEtsDU8JH21sMzaIEm7k8yl003SSN6fDqMXsHNuheXIPZKcNfBX7ZmIGJlXTbZjkr4ATAaqgIVFq9YCN0XE3XnUlScHSU4kTQROBQ4Hfl+0qiewJSKOzqUwK5mkz0bEL/Ouoy3woU1+HgX+STI93w+Klq8FluRSkTVJRPxS0ieBfYGuRcun5ldVPtwjMWsmSdNJzomMAW4kmZzryYhod8Pk2+WlqrZE0iGSnpK0TtK7krZIeivvuqwkh0XEJJJHqvwHcCjbTi/abjhI8vdjYCLwAtAN+L/Aj3KtyEr1duHfDZIGAJuAoTnWkxufI2kDImK5pI4RsQX4uaRH867JSvJrSbsAVwJPk4xIvjHfkvLhcyQ5k/QwcDTJL+D/JzkBOzkiDsi1MGsSSV2ArhHRLu+1cZDkTNKewCvATsDXSB7J8ZOIWJ5rYdYoSZPqWx4Rt7R2LXlzkJg1k6Tic1ldgbHA0xFxYk4l5cZBkjNJL1H/0wX3yqEcS0FSb+DWiDg+71pam0+25q/4EY9dSW5D75tTLZbOBmBY3kXkwT2SNkjSIxFxeN512I5Jmsv7vckOwHBgVkRcmF9V+XCPJGeSim/Y60DSQ/GcreXhqqLXm4G/RURNXsXkyT2SnEmaX9TcDLwMXBURz+dTkVnTOUjMmkjSWnYwHWZE9GrFctoEH9rkRNL5O1ofET9srVqsaSKiJ4CkqSSDCG8lmdzoc7TTw1IHSX5qf+H2Af6NZBJhgOOAh3OpyJrqmIg4uKj9U0lPAFfkVVBeHCQ5KdwtiqTfAKMiYm2hPQWYnWNpVrotkj4H3EFyqDMRP9fGcjIYeLeo/S4wJJ9SrIlOBSYAqwofJxWWtTvukeTvVuBJSfeQ/FX7NNDu7tUoRxHxMnBC3nW0Bb5q0wZI+gjJ3K0AD0fEM3nWY6WR1JXkUSJ1p1r8Ym5F5cSHNm1ARCwCbgfuAVZLGpxzSVaaW4HdgWOABSTPbV6ba0U5cY8kZ5KOJ5n8eQDJdAKDgT9HxL65FmaNqn1siKQlEbG/pJ1IHnD2sbxra23ukeTve8AhwF8iYijJJEd/yLckK9Gmwr9vShpBMpfMkPzKyY+DJH+bImI10EFSh4iYDxyYd1FWkhmS+gCXkIwDWgZcnm9J+fBVm/y9KakHySC02yS9QnLPjbVhhWc2vxURb5D87Nr1/DE+R5IzSd1JZiPvQDLEujdwW6GXYm2YpIcj4oi862gLHCQ5ktSR5OScH89ZhiR9h+SPwJ3A+trlEfF6bkXlxEGSM0lzgM+319nHy1lhmsy6oj1Ok+lzJPnbCPxR0m/Z9q/aufmVZKUoXGUzHCRtwb2FD3h/jgvlVIuVQFIvYLeIeKHQPonkKYmQHKquyq24nDhIciLpBKAyIq4rtJ8EKkjC5Ft51maNugp4lOQxqwD/BdxPEiaHAWfmVFduHCT5+SZwSlG7M/ARoAfwczyVQFv2b8AZRe21EXEOJBN351NSvhwk+ekcESuK2o8Uzva/XrgkbG1Xp9j2KsXni17v0trFtAUe2ZqfPsWNiDi7qFnRyrVY07wnaffaRkT8CUDSQOC93KrKkYMkP09I+lLdhZLOAJ7MoR4r3ZXAXElHSOpZ+DgS+FVhXbvjcSQ5kbQryS/eO8DThcUfAboAn2qPZ/7LiaRxwLdJ5iIJYClwWUTcn2thOXGQ5EzSx0h+GQGWRsT/5FmPWXM4SMwsNZ8jMbPUHCRmzSRpuyHy9S1rDxwkZs33y3qW3dXqVbQBHpBm1kSSPkRygry3pM8UrepF0Wzy7YmDxKzp9gGOJRnFelzR8rXAdmOD2gNftTFrJkmHRsRjedfRFvgciVnzrZB0j6RXJK2S9EtJlXkXlQcHiVnz/Zxk9vgBwEBgbmFZu+NDG7NmkvRsRBxQZ9niiGh3jxNxj8Ss+V6VdJqkjoWP04B2Ofu/eyRmzVR4RvOPgUNJbtx7FPhqRPwt18Jy4CAxs9Q8jsSsiSR9dwerIyK+12rFtBHukZg1kaQL6lncHTgd6BcRPVq5pNw5SMxSkNQT+CpJiMwCfhARr+RbVevzoY1ZM0jqC5xP8rzmm4FRhQeKt0sOErMmknQl8BlgBrBfRKzLuaTc+dDGrIkkvUcy1+5m3n86IiRPSIyI6JVLYTlykJhZah7ZamapOUjMLDUHiZml5iCxbUjaImlx0ceF9WxzlKRft/DnPUrSYUXtMyVNasnPYdnx5V+r6+2cboM/ClhHcuMbETE9hxqsmdwjsZJIGifpz5IeIRlDUbt8iqSvF7X/JGlI4fUkSUskPSvp1sKy4yQ9IekZSQ9K2q2w/ZnA1wq9oI8W71fSgZIeL+zrHkl9CssfknS5pCcl/UXSR1vp22F1OEisrm51Dm1OltQVuIFkouOPArs3thNJ+wIXAx8rTP7z1cKqR4BDImIkcAfwzYh4GZgOXB0RB0bE7+vs7hbgWxGxP/BH4NKidZ0i4iDgvDrLrRX50Mbq2u7QRtKBwEsR8UKh/f+A6kb28zHgroh4DSAiXi8srwTulLQH0Bl4aUc7kdQb2CUiFhQW3QzMLtrk7sK/i4AhjdRkGXGPxErV0MjFzWz7e1T7XBc18J4fAT+OiP2AM0j/HJh3Cv9uwX8Yc+MgsVL8GRgqae9Ce2LRupeBUQCSRgG1j6z8HTBBUr/Cur6F5b2BfxRef6FoP2uBnnU/cUSsAd4oOv/xeWBB3e0sXw4Sq6vuOZLLImIjyaHMvYWTrcVTCf4S6CtpMfBl4C8AEbEU+D6wQNKzwA8L208BZkv6PfBa0X7mAp+uPdlap6YvAFdKWgIcCExtyS/Y0vO9NmaWmnskZpaag8TMUnOQmFlqDhIzS81BYmapOUjMLDUHiZml5iAxs9T+F1NA9CpNRltlAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(pd.crosstab(train['Education'],train['Loan_Status']))\n",
    "\n",
    "Education=pd.crosstab(train['Education'],train['Loan_Status'])\n",
    "Education.div(Education.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize=(4,4))\n",
    "plt.xlabel('Education')\n",
    "p = plt.ylabel('Percentage')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Loan_Status</th>\n",
       "      <th>N</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Education</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Graduate</td>\n",
       "      <td>140</td>\n",
       "      <td>340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>52</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Loan_Status     N    Y\n",
       "Education             \n",
       "Graduate      140  340\n",
       "Not Graduate   52   82"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Education=pd.crosstab(train['Education'],train['Loan_Status'])\n",
    "Education"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loan_Status      N    Y\n",
      "Self_Employed          \n",
      "No             157  343\n",
      "Yes             26   56\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(pd.crosstab(train['Self_Employed'],train['Loan_Status']))\n",
    "\n",
    "Self_Employed=pd.crosstab(train['Self_Employed'],train['Loan_Status'])\n",
    "Self_Employed.div(Self_Employed.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize=(4,4))\n",
    "plt.xlabel('Self_Employed')\n",
    "p = plt.ylabel('Percentage')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loan_Status      N    Y\n",
      "Credit_History         \n",
      "0.0             82    7\n",
      "1.0             97  378\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(pd.crosstab(train['Credit_History'],train['Loan_Status']))\n",
    "\n",
    "Credit_History=pd.crosstab(train['Credit_History'],train['Loan_Status'])\n",
    "Credit_History.div(Credit_History.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize=(4,4))\n",
    "plt.xlabel('Credit_History')\n",
    "p = plt.ylabel('Percentage')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loan_Status     N    Y\n",
      "Property_Area         \n",
      "Rural          69  110\n",
      "Semiurban      54  179\n",
      "Urban          69  133\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(pd.crosstab(train['Property_Area'],train['Loan_Status']))\n",
    "\n",
    "Property_Area=pd.crosstab(train['Property_Area'],train['Loan_Status'])\n",
    "Property_Area.div(Property_Area.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)\n",
    "plt.xlabel('Property_Area')   #divided dataframe by total value of rural for rural rows\n",
    "P = plt.ylabel('Percentage')   # then semiurban and urban with total value of each rows\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "      <th>Coapplicant_Income_bin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LP001002</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>5849</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>LP001003</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>4583</td>\n",
       "      <td>1508.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>N</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>LP001005</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>LP001006</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2583</td>\n",
       "      <td>2358.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>LP001008</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>6000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
       "0  LP001002   Male      No          0      Graduate            No   \n",
       "1  LP001003   Male     Yes          1      Graduate            No   \n",
       "2  LP001005   Male     Yes          0      Graduate           Yes   \n",
       "3  LP001006   Male     Yes          0  Not Graduate            No   \n",
       "4  LP001008   Male      No          0      Graduate            No   \n",
       "\n",
       "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "0             5849                0.0         NaN             360.0   \n",
       "1             4583             1508.0       128.0             360.0   \n",
       "2             3000                0.0        66.0             360.0   \n",
       "3             2583             2358.0       120.0             360.0   \n",
       "4             6000                0.0       141.0             360.0   \n",
       "\n",
       "   Credit_History Property_Area Loan_Status Coapplicant_Income_bin  \n",
       "0             1.0         Urban           Y                    NaN  \n",
       "1             1.0         Rural           N                Average  \n",
       "2             1.0         Urban           Y                    NaN  \n",
       "3             1.0         Urban           Y                Average  \n",
       "4             1.0         Urban           Y                    NaN  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Making bins for Coapplicant income variable\n",
    "bins=[0,1000,3000,42000]\n",
    "group=['Low','Average','High']\n",
    "train['Coapplicant_Income_bin']=pd.cut(train['CoapplicantIncome'],bins,labels=group)\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Coapplicant_Income_bin=pd.crosstab(train['Coapplicant_Income_bin'],train['Loan_Status'])\n",
    "Coapplicant_Income_bin.div(Coapplicant_Income_bin.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)\n",
    "plt.xlabel('Property_Area')\n",
    "P = plt.ylabel('Percentage')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Making bins for LoanAmount variable\n",
    "bins=[0,100,200,700]\n",
    "group=['Low','Average','High']\n",
    "train['LoanAmount_bin']=pd.cut(train['LoanAmount'],bins,labels=group)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "LoanAmount_bin=pd.crosstab(train['LoanAmount_bin'],train['Loan_Status'])\n",
    "LoanAmount_bin.div(LoanAmount_bin.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)\n",
    "plt.xlabel('Property_Area')\n",
    "P = plt.ylabel('Percentage')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop the new variable of bins\n",
    "train=train.drop(['LoanAmount_bin', 'Coapplicant_Income_bin'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LP001002</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>5849</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>LP001003</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>4583</td>\n",
       "      <td>1508.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>LP001005</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>LP001006</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2583</td>\n",
       "      <td>2358.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>LP001008</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>6000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
       "0  LP001002   Male      No          0      Graduate            No   \n",
       "1  LP001003   Male     Yes          1      Graduate            No   \n",
       "2  LP001005   Male     Yes          0      Graduate           Yes   \n",
       "3  LP001006   Male     Yes          0  Not Graduate            No   \n",
       "4  LP001008   Male      No          0      Graduate            No   \n",
       "\n",
       "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "0             5849                0.0         NaN             360.0   \n",
       "1             4583             1508.0       128.0             360.0   \n",
       "2             3000                0.0        66.0             360.0   \n",
       "3             2583             2358.0       120.0             360.0   \n",
       "4             6000                0.0       141.0             360.0   \n",
       "\n",
       "   Credit_History Property_Area Loan_Status  \n",
       "0             1.0         Urban           Y  \n",
       "1             1.0         Rural           N  \n",
       "2             1.0         Urban           Y  \n",
       "3             1.0         Urban           Y  \n",
       "4             1.0         Urban           Y  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# replacing 3+ in Dependents variable with 3\n",
    "# replacing Y and N in Loan_Status variable with 1 and 0 respectively\n",
    "# different tyeps of values are replaced by proper numbers\n",
    "\n",
    "\n",
    "train['Dependents'].replace(('0', '1', '2', '3+'), (0, 1, 2, 3),inplace=True)\n",
    "test['Dependents'].replace(('0', '1', '2', '3+'), (0, 1, 2, 3),inplace=True)\n",
    "train['Loan_Status'].replace('N', 0,inplace=True)\n",
    "train['Loan_Status'].replace('Y', 1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print correlation matrix\n",
    "matrix = train.corr()\n",
    "\n",
    "f, ax = plt.subplots(figsize=(9, 6))\n",
    "sns.heatmap(matrix, square=True, cmap=\"BuPu\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Missing value and outlier treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Loan_ID               0\n",
       "Gender               13\n",
       "Married               3\n",
       "Dependents           15\n",
       "Education             0\n",
       "Self_Employed        32\n",
       "ApplicantIncome       0\n",
       "CoapplicantIncome     0\n",
       "LoanAmount           22\n",
       "Loan_Amount_Term     14\n",
       "Credit_History       50\n",
       "Property_Area         0\n",
       "Loan_Status           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the missing values\n",
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "# replacing the missing values with the mode for categorical vairable\n",
    "train['Gender'].fillna(train['Gender'].mode()[0], inplace=True)\n",
    "train['Married'].fillna(train['Married'].mode()[0], inplace=True)\n",
    "train['Dependents'].fillna(train['Dependents'].mode()[0], inplace=True)\n",
    "train['Self_Employed'].fillna(train['Self_Employed'].mode()[0], inplace=True)\n",
    "train['Credit_History'].fillna(train['Credit_History'].mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "360.0    512\n",
       "180.0     44\n",
       "480.0     15\n",
       "300.0     13\n",
       "84.0       4\n",
       "240.0      4\n",
       "120.0      3\n",
       "36.0       2\n",
       "60.0       2\n",
       "12.0       1\n",
       "Name: Loan_Amount_Term, dtype: int64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Loan_Amount_Term'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 614 entries, 0 to 613\n",
      "Data columns (total 13 columns):\n",
      "Loan_ID              614 non-null object\n",
      "Gender               614 non-null object\n",
      "Married              614 non-null object\n",
      "Dependents           614 non-null float64\n",
      "Education            614 non-null object\n",
      "Self_Employed        614 non-null object\n",
      "ApplicantIncome      614 non-null int64\n",
      "CoapplicantIncome    614 non-null float64\n",
      "LoanAmount           592 non-null float64\n",
      "Loan_Amount_Term     614 non-null float64\n",
      "Credit_History       614 non-null float64\n",
      "Property_Area        614 non-null object\n",
      "Loan_Status          614 non-null int64\n",
      "dtypes: float64(5), int64(2), object(6)\n",
      "memory usage: 62.5+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Education</th>\n",
       "      <th>Graduate</th>\n",
       "      <th>Not Graduate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Self_Employed</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>No</td>\n",
       "      <td>130.0</td>\n",
       "      <td>113.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Yes</td>\n",
       "      <td>157.5</td>\n",
       "      <td>130.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Education      Graduate  Not Graduate\n",
       "Self_Employed                        \n",
       "No                130.0         113.0\n",
       "Yes               157.5         130.0"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We wil be using pivot table\n",
    "tab = train.pivot_table(values = 'LoanAmount', index = 'Self_Employed', columns = 'Education', aggfunc = np.median)\n",
    "tab\n",
    "# def fage(x):\n",
    "#tab.loc[train['Self_Employed'],train['Education']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replacing the missing value in LoanAmount based on the values of Self_Employed and Education Variable\n",
    "table = train.pivot_table(values='LoanAmount', index='Self_Employed' ,columns='Education', aggfunc=np.median)\n",
    "\n",
    "# Define function to return value of this pivot_table\n",
    "def fage(x):\n",
    " return table.loc[x['Self_Employed'],x['Education']]\n",
    "\n",
    "# Replace missing values\n",
    "train['LoanAmount'].fillna(train[train['LoanAmount'].isnull()].apply(fage, axis=1), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Loan_ID               0\n",
       "Gender               11\n",
       "Married               0\n",
       "Dependents           10\n",
       "Education             0\n",
       "Self_Employed        23\n",
       "ApplicantIncome       0\n",
       "CoapplicantIncome     0\n",
       "LoanAmount            5\n",
       "Loan_Amount_Term      6\n",
       "Credit_History       29\n",
       "Property_Area         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Similar changes in test file\n",
    "test['Gender'].fillna(test['Gender'].mode()[0], inplace=True)\n",
    "test['Dependents'].fillna(test['Dependents'].mode()[0], inplace=True)\n",
    "test['Self_Employed'].fillna(test['Self_Employed'].mode()[0], inplace=True)\n",
    "test['Credit_History'].fillna(test['Credit_History'].mode()[0], inplace=True)\n",
    "test['Loan_Amount_Term'].fillna(test['Loan_Amount_Term'].mode()[0], inplace=True)\n",
    "table = test.pivot_table(values='LoanAmount', index='Self_Employed' ,columns='Education', aggfunc=np.median)\n",
    "\n",
    "# Define function to return value of this pivot_table\n",
    "def fage(x):\n",
    " return table.loc[x['Self_Employed'],x['Education']]\n",
    "\n",
    "# Replace missing values\n",
    "test['LoanAmount'].fillna(test[test['LoanAmount'].isnull()].apply(fage, axis=1), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7b17fc6ac8>"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "np.log(train['LoanAmount']).hist(bins=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Removing skewness in LoanAmount variable by log transformation\n",
    "train['LoanAmount_log'] = np.log(train['LoanAmount'])\n",
    "train['LoanAmount_log'].hist(bins=20)\n",
    "test['LoanAmount_log'] = np.log(test['LoanAmount'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['Loan_ID'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-91-38c81b1649c0>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mtrain\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtrain\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Loan_ID'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mtest\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtest\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Loan_ID'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[0;32m   4100\u001b[0m             \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4101\u001b[0m             \u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 4102\u001b[1;33m             \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   4103\u001b[0m         )\n\u001b[0;32m   4104\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[0;32m   3912\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[1;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3913\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3914\u001b[1;33m                 \u001b[0mobj\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3915\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3916\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[1;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[0;32m   3944\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3945\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3946\u001b[1;33m                 \u001b[0mnew_axis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3947\u001b[0m             \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3948\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, errors)\u001b[0m\n\u001b[0;32m   5338\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0many\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5339\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[1;34m\"ignore\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5340\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"{} not found in axis\"\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mmask\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5341\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5342\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: \"['Loan_ID'] not found in axis\""
     ]
    }
   ],
   "source": [
    "train=train.drop('Loan_ID',axis=1)\n",
    "test=test.drop('Loan_ID',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = train.drop('Loan_Status',1)\n",
    "y = train.Loan_Status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "      <th>LoanAmount_log</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>5849</td>\n",
       "      <td>0.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>1</td>\n",
       "      <td>4.867534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>4583</td>\n",
       "      <td>1508.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>0</td>\n",
       "      <td>4.852030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>1</td>\n",
       "      <td>4.189655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2583</td>\n",
       "      <td>2358.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>1</td>\n",
       "      <td>4.787492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>6000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>1</td>\n",
       "      <td>4.948760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>609</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2900</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>1</td>\n",
       "      <td>4.262680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>610</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>4106</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>1</td>\n",
       "      <td>3.688879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>611</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8072</td>\n",
       "      <td>240.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>1</td>\n",
       "      <td>5.533389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>612</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>7583</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>1</td>\n",
       "      <td>5.231109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>613</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4583</td>\n",
       "      <td>0.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Semiurban</td>\n",
       "      <td>0</td>\n",
       "      <td>4.890349</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>614 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender Married  Dependents     Education Self_Employed  ApplicantIncome  \\\n",
       "0      Male      No         0.0      Graduate            No             5849   \n",
       "1      Male     Yes         1.0      Graduate            No             4583   \n",
       "2      Male     Yes         0.0      Graduate           Yes             3000   \n",
       "3      Male     Yes         0.0  Not Graduate            No             2583   \n",
       "4      Male      No         0.0      Graduate            No             6000   \n",
       "..      ...     ...         ...           ...           ...              ...   \n",
       "609  Female      No         0.0      Graduate            No             2900   \n",
       "610    Male     Yes         3.0      Graduate            No             4106   \n",
       "611    Male     Yes         1.0      Graduate            No             8072   \n",
       "612    Male     Yes         2.0      Graduate            No             7583   \n",
       "613  Female      No         0.0      Graduate           Yes             4583   \n",
       "\n",
       "     CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n",
       "0                  0.0       130.0             360.0             1.0   \n",
       "1               1508.0       128.0             360.0             1.0   \n",
       "2                  0.0        66.0             360.0             1.0   \n",
       "3               2358.0       120.0             360.0             1.0   \n",
       "4                  0.0       141.0             360.0             1.0   \n",
       "..                 ...         ...               ...             ...   \n",
       "609                0.0        71.0             360.0             1.0   \n",
       "610                0.0        40.0             180.0             1.0   \n",
       "611              240.0       253.0             360.0             1.0   \n",
       "612                0.0       187.0             360.0             1.0   \n",
       "613                0.0       133.0             360.0             0.0   \n",
       "\n",
       "    Property_Area  Loan_Status  LoanAmount_log  \n",
       "0           Urban            1        4.867534  \n",
       "1           Rural            0        4.852030  \n",
       "2           Urban            1        4.189655  \n",
       "3           Urban            1        4.787492  \n",
       "4           Urban            1        4.948760  \n",
       "..            ...          ...             ...  \n",
       "609         Rural            1        4.262680  \n",
       "610         Rural            1        3.688879  \n",
       "611         Urban            1        5.533389  \n",
       "612         Urban            1        5.231109  \n",
       "613     Semiurban            0        4.890349  \n",
       "\n",
       "[614 rows x 13 columns]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding dummies to the dataset\n",
    "X=pd.get_dummies(X)\n",
    "train=pd.get_dummies(train)\n",
    "test=pd.get_dummies(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing packages for cross validation and logistic regression\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      0\n",
       "2      1\n",
       "3      1\n",
       "4      1\n",
       "      ..\n",
       "609    1\n",
       "610    1\n",
       "611    1\n",
       "612    1\n",
       "613    0\n",
       "Name: Loan_Status, Length: 614, dtype: int64"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "1 of kfold 5\n",
      "accuracy_score 0.7723577235772358\n",
      "\n",
      "2 of kfold 5\n",
      "accuracy_score 0.7967479674796748\n",
      "\n",
      "3 of kfold 5\n",
      "accuracy_score 0.7642276422764228\n",
      "\n",
      "4 of kfold 5\n",
      "accuracy_score 0.8048780487804879\n",
      "\n",
      "5 of kfold 5\n",
      "accuracy_score 0.7786885245901639\n"
     ]
    }
   ],
   "source": [
    "# logistic regression\n",
    "i=1\n",
    "kf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True)\n",
    "for train_index,test_index in kf.split(X,y):\n",
    "     print('\\n{} of kfold {}'.format(i,kf.n_splits))\n",
    "     xtr,xvl = X.loc[train_index],X.loc[test_index]\n",
    "     ytr,yvl = y[train_index],y[test_index]\n",
    "    \n",
    "     model = LogisticRegression(random_state=1)\n",
    "     model.fit(xtr, ytr)\n",
    "     pred_test = model.predict(xvl)\n",
    "     score = accuracy_score(yvl,pred_test)\n",
    "     print('accuracy_score',score)\n",
    "     i+=1\n",
    "pred_test = model.predict(test)\n",
    "pred=model.predict_proba(xvl)[:,1]  # as we have to make ROC curve we will need probabilites of 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0.        , 0.        , 0.        , 0.07894737, 0.07894737,\n",
       "        0.10526316, 0.10526316, 0.13157895, 0.13157895, 0.15789474,\n",
       "        0.15789474, 0.18421053, 0.18421053, 0.21052632, 0.21052632,\n",
       "        0.23684211, 0.23684211, 0.28947368, 0.28947368, 0.34210526,\n",
       "        0.34210526, 0.36842105, 0.36842105, 0.39473684, 0.39473684,\n",
       "        0.42105263, 0.42105263, 0.44736842, 0.44736842, 0.47368421,\n",
       "        0.47368421, 0.5       , 0.5       , 0.52631579, 0.52631579,\n",
       "        0.57894737, 0.57894737, 0.63157895, 0.63157895, 0.76315789,\n",
       "        0.76315789, 1.        ]),\n",
       " array([0.        , 0.01190476, 0.17857143, 0.17857143, 0.28571429,\n",
       "        0.28571429, 0.36904762, 0.36904762, 0.38095238, 0.38095238,\n",
       "        0.4047619 , 0.4047619 , 0.41666667, 0.41666667, 0.45238095,\n",
       "        0.45238095, 0.47619048, 0.47619048, 0.48809524, 0.48809524,\n",
       "        0.5952381 , 0.5952381 , 0.61904762, 0.61904762, 0.67857143,\n",
       "        0.67857143, 0.76190476, 0.76190476, 0.78571429, 0.78571429,\n",
       "        0.85714286, 0.85714286, 0.86904762, 0.86904762, 0.94047619,\n",
       "        0.94047619, 0.95238095, 0.95238095, 0.97619048, 0.97619048,\n",
       "        1.        , 1.        ]),\n",
       " array([1.97340043, 0.97340043, 0.91134144, 0.90873039, 0.89241107,\n",
       "        0.88783347, 0.87102962, 0.87063226, 0.86860976, 0.86614443,\n",
       "        0.86208748, 0.84600853, 0.83207263, 0.83155262, 0.82408855,\n",
       "        0.82257399, 0.82020266, 0.81576807, 0.81469103, 0.80671073,\n",
       "        0.75640239, 0.7560949 , 0.75470179, 0.75287823, 0.7368633 ,\n",
       "        0.73663738, 0.70207492, 0.70178562, 0.68374637, 0.67559656,\n",
       "        0.6382665 , 0.63187826, 0.623982  , 0.62066836, 0.52379051,\n",
       "        0.50099867, 0.49660265, 0.47710887, 0.47409582, 0.34466613,\n",
       "        0.33236371, 0.05400908]))"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.roc_curve(yvl,  pred)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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v5L1SJIkSeurR6UOHBHdgWuBjwF1wIyImJSZtY2anQW8lpm7R8Ro4PvASZWqSZKkzmL58uXU1dXxzjvvdHQp0kavZ8+e9OvXj0022aSs9hUL0MB+wNzMfA4gIsYBo4DGAXoU8K3S6zuAMRERmZkVrEuSpA5XV1fH1ltvTf/+/YmIji5H2mhlJosXL6auro4BAwaUtU8lh3D0BeY1Wq4rrWu2TWauAJYA21ewJkmSOoV33nmH7bff3vAsdbCIYPvtty/0aVAle6Cb+xehac9yOW2IiHOAcwB23nnn9a9sHVTvWNUh55UkbbgMz1LnUPR3sZI90HXATo2W+wEvr61NRPQAtgH+3vRAmTk2M2sys6Z3794VKrdl3zx6MN88enCHnFuSpM5gq622AuDll1/mhBNOaLbNIYccwsyZM1s8zo9+9CPeeuuthuUjjzySf/zjH21XaDu75557+MAHPsDuu+/O9773vWbbXHjhhQwbNoxhw4YxaNAg3ve+9wEwa9YsRowYweDBgxkyZAjjx49v2CczueSSSxg0aBB77rkn11xzDQAPPvgg22yzTcPxLr/88lZrOeussxg6dChDhgzhhBNO4I033mixLoDu3bs3bDvmmGMa1j/wwAMMHz6cvfbai9NOO40VK1YAMHHiRIYMGcKwYcOoqanh97//fcM+X/3qV9lrr73Ya6+91niP999/P8OHD2fYsGH867/+K3Pnzl3j+3bHHXcQEQ0/U8uWLeOMM85g7733ZujQoTz44IMNbZctW8Y555zDoEGD2GOPPbjzzjsBuOqqq6iurmbIkCEceuihvPjii2u9lmXLzIp8Ud+7/RwwANgUeBwY3KTNvwM/Lr0eDdze2nH33XfflCSpq6utre3oEgrbcsstW21z8MEH54wZM1pss8suu+TChQvbqqwOtWLFitx1113z2WefzXfffTeHDBmSTz75ZIv7XHPNNXnGGWdkZuacOXPy6aefzszM+fPn5/vf//587bXXMjPzxhtvzFNPPTVXrlyZmZmvvPJKZmZOmTIlP/GJTxSqZcmSJQ3tLrzwwvzP//zPFuvKbP56r1y5Mvv165dz5szJzMxLL700b7jhhszMfP3113PVqlWZmfn444/nBz7wgczMvPvuu/OjH/1oLl++PN94443cd999G+oZOHBgw+/Ctddem6eddlrDuZYuXZof+tCHcv/992/4mRozZkyefvrpDd+P4cOHN3x/Lrvssrzkkksa6lz9M/bAAw/km2++mZmZ1113XZ544onveV+Zzf9OAjOzmTxasR7orB/TfD7wW+CpUjh+MiIuj4jVf8b8FNg+IuYCFwHvedSdJElqe1/96le57rrrGpa/9a1v8cMf/pA33niDQw89lOHDh7P33nszceLE9+z7wgsvsNdeewHw9ttvM3r0aIYMGcJJJ53E22+/3dDuvPPOo6amhsGDB/PNb34TgGuuuYaXX36ZkSNHMnLkSAD69+/PokWLgPrewtU9lT/60Y8azrfnnnty9tlnM3jwYA477LA1ztOc6dOnc+CBB7LPPvtw4IEHMmfOHABuvvlmzj///IZ2Rx11VEMv5j333MPw4cMZOnQohx56aFnfx+nTp7P77ruz6667summmzJ69Ohmv2eN3XbbbZx88skADBo0iIEDBwKw4447ssMOO7Bw4UIArr/+ei677DK6dauPazvssMM611JVVT8UNTN5++23mx2y0LiutVm8eDGbbbYZgwYNAuBjH/tYQ0/vVltt1XDcN998s+F1bW0tBx98MD169GDLLbdk6NCh3HPPPUD90ImlS5cCsGTJEnbccceGc1166aV85StfoWfPng3ramtrG67NDjvswPve976G3ukbb7yRr33tawB069aNXr16ATBy5Ei22GILAA444ADq6upafI/lqOQYaDJzMjC5ybrLGr1+B/hUJWuQJKmz+/avn6T25aVteszqHataHHo4evRovvjFL/L5z38egNtvv5177rmHnj17MmHCBKqqqli0aBEHHHAAxxxzzFrHiF5//fVsscUWzJ49m9mzZzN8+PCGbd/97nfZbrvtWLlyJYceeiizZ8/mggsu4KqrrmLKlCkNAWe1Rx99lJtuuolp06aRmey///4cfPDBbLvttjzzzDPcdttt/OQnP+HEE0/kzjvv5NOf/vRa398ee+zB1KlT6dGjB/fddx9f//rXG4JecxYuXMjZZ5/N1KlTGTBgAH//e/2I0ilTpnDhhRe+p/0WW2zBH//4R+bPn89OO/1zxGq/fv2YNm3aWs/z4osv8vzzz/ORj3zkPdumT5/OsmXL2G233QB49tlnGT9+PBMmTKB3795cc801DWH7T3/6E0OHDmXHHXfkyiuvZPDgwa3WcsYZZzB58mSqq6v54Q9/2Gpd77zzDjU1NfTo0YOLL76YY489ll69erF8+XJmzpxJTU0Nd9xxB/Pm/fOZERMmTOBrX/sar776Kv/7v/8LwNChQ/n2t7/NRRddxFtvvcWUKVOorq4G4IYbbuDII49k8803p6qqikceeQSAxx57jHnz5nHUUUdx5ZVXNhx/6NChTJw4kdGjRzNv3jweffRR5s2b1xDoL730Uh588EF22203xowZw7/8y7+s8T5/+tOfcsQRR6z1+pSrogFakiR1Tvvssw+vvvoqL7/8MgsXLmTbbbdl5513Zvny5Xz9619n6tSpdOvWjfnz5/PKKxHaRGkAAA/SSURBVK/w/ve/v9njTJ06lQsuuACAIUOGMGTIkIZtt99+O2PHjmXFihUsWLCA2traNbY39fvf/57jjjuOLbfcEoDjjz+ehx9+mGOOOYYBAwYwbNgwAPbdd19eeOGFFt/fkiVLOO2003jmmWeICJYvX95i+0ceeYQPf/jDDY8x22677YD63stZs2atdb9s5sm7Ld2QNm7cOE444QS6d+++xvoFCxZw6qmn8rOf/ayhx/ndd9+lZ8+ezJw5k7vuuoszzzyThx9+mOHDh/Piiy+y1VZbMXnyZI499lieeeaZVmu56aabWLlyJV/4whcYP348Z5xxRot1vfTSS+y4444899xzfOQjH2Hvvfdmt912Y9y4cVx44YW8++67HHbYYfTo8c84edxxx3HccccxdepULr30Uu677z4OO+wwZsyYwYEHHkjv3r0ZMWJEwz5XX301kydPZv/99+eKK67goosuYuzYsVx44YXcfPPN73k/Z555Jk899RQ1NTXssssuHHjggfTo0YMVK1ZQV1fHQQcdxFVXXcVVV13Fl770JX7xi1807PvLX/6SmTNn8tBDD631+pTLAC1JUgfrqJvUTzjhBO644w7+9re/MXr0aABuueUWFi5cyKOPPsomm2xC//79W328V3OB8fnnn+fKK69kxowZbLvttpx++umtHqe5ALjaZptt1vC6e/furQ7huPTSSxk5ciQTJkzghRde4JBDDgGgR48erFq1qqHd6poys9n30VoPdL9+/dboga2rq1tjGEJT48aN49prr11j3dKlS/nEJz7Bd77zHQ444ICG9f369eOTn/wkUB9MVwfe1cMxoP4GzM9//vMsWrSorFq6d+/OSSedxBVXXPGeAN20rtX77rrrrhxyyCE89thj7LbbbowYMYKHH34YgN/97nc8/fTT73mfH/7wh3n22WdZtGgRvXr14pJLLuGSSy4B4N/+7d8YOHAgCxcu5PHHH2f//fcH4KSTTuLwww/n9ddf54knnmi4Zn/729845phjmDRpEjU1NVx99dUN5znwwAMZOHAg22+/PVtssQXHHXccAJ/61Kf46U9/2tDuvvvu47vf/S4PPfTQGj9L66qiU3lLkqTOa/To0YwbN4477rij4akaS5YsYYcddmCTTTZhypQprT6x4MMf/jC33HILAE888QSzZ88G6kPhlltuyTbbbMMrr7zCb37zm4Z9tt56a15//fVmj/WrX/2Kt956izfffJMJEybwoQ99qMXzjxkzhjFjxrxn/ZIlS+jbt376icY9mf3792fWrFmsWrWKefPmMX36dABGjBjBQw89xPPPPw/QMIRjdQ90068//vGPAHzwgx/kmWee4fnnn2fZsmWMGzdujSdWNDZnzhxee+01RowY0bBu2bJlHHfccXzmM5/hU59ac1TrscceywMPPADAQw891DBM4W9/+1vDHxvTp09n1apVbL/99mutJTMbnm6Rmfz6179mjz32aLGu1157jXfffReARYsW8Yc//KFh2MWrr74K1PeQf//73+dzn/scAHPnzm2o689//jPLli1j++23Z+XKlSxevBigYajPYYcdxrbbbsuSJUsaAvi9997LnnvuyTbbbMOiRYt44YUXeOGFFzjggAMawvPqn43V7Xv06EF1dTURwdFHH90wnv3+++9vqPexxx7j3HPPZdKkSa2OIy+XPdCSJG2kBg8ezOuvv07fvn3p06cPAKeccgpHH300NTU1DBs2bI2g1ZzzzjuPM844o+HxZfvttx9QP1Z1n332YfDgwey6664cdNBBDfucc845HHHEEfTp04cpU6Y0rB8+fDinn356wzE++9nPss8++7Q4XOOvf/3rGsde7Stf+QqnnXYaV1111Rrjeg866CAGDBjA3nvvzV577dUwZrt3796MHTuW448/nlWrVrHDDjtw7733tvIdrO/RHjNmDB//+MdZuXIlZ555JoMH13+icNlll1FTU9MQqG+77TZGjx69Rk/37bffztSpU1m8eHFD0L/55psZNmwYF198MaeccgpXX301W221FTfccANQ/2i366+/nh49erD55psz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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ROC curve\n",
    "from sklearn import metrics\n",
    "fpr, tpr, _ = metrics.roc_curve(yvl,  pred)\n",
    "auc = metrics.roc_auc_score(yvl, pred)\n",
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(fpr,tpr,label=\"validation, auc=\"+str(auc))\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.legend(loc=4)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Total_Income feature\n",
    "train['Total_Income']=train['ApplicantIncome']+train['CoapplicantIncome']\n",
    "test['Total_Income']=test['ApplicantIncome']+test['CoapplicantIncome']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dependents</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Loan_Status</th>\n",
       "      <th>LoanAmount_log</th>\n",
       "      <th>Gender_Female</th>\n",
       "      <th>Gender_Male</th>\n",
       "      <th>Married_No</th>\n",
       "      <th>Married_Yes</th>\n",
       "      <th>Education_Graduate</th>\n",
       "      <th>Education_Not Graduate</th>\n",
       "      <th>Self_Employed_No</th>\n",
       "      <th>Self_Employed_Yes</th>\n",
       "      <th>Property_Area_Rural</th>\n",
       "      <th>Property_Area_Semiurban</th>\n",
       "      <th>Property_Area_Urban</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5849</td>\n",
       "      <td>0.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.867534</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4583</td>\n",
       "      <td>1508.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.852030</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.189655</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2583</td>\n",
       "      <td>2358.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.787492</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.948760</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Dependents  ApplicantIncome  CoapplicantIncome  LoanAmount  \\\n",
       "0         0.0             5849                0.0       130.0   \n",
       "1         1.0             4583             1508.0       128.0   \n",
       "2         0.0             3000                0.0        66.0   \n",
       "3         0.0             2583             2358.0       120.0   \n",
       "4         0.0             6000                0.0       141.0   \n",
       "\n",
       "   Loan_Amount_Term  Credit_History  Loan_Status  LoanAmount_log  \\\n",
       "0             360.0             1.0            1        4.867534   \n",
       "1             360.0             1.0            0        4.852030   \n",
       "2             360.0             1.0            1        4.189655   \n",
       "3             360.0             1.0            1        4.787492   \n",
       "4             360.0             1.0            1        4.948760   \n",
       "\n",
       "   Gender_Female  Gender_Male  Married_No  Married_Yes  Education_Graduate  \\\n",
       "0              0            1           1            0                   1   \n",
       "1              0            1           0            1                   1   \n",
       "2              0            1           0            1                   1   \n",
       "3              0            1           0            1                   0   \n",
       "4              0            1           1            0                   1   \n",
       "\n",
       "   Education_Not Graduate  Self_Employed_No  Self_Employed_Yes  \\\n",
       "0                       0                 1                  0   \n",
       "1                       0                 1                  0   \n",
       "2                       0                 0                  1   \n",
       "3                       1                 1                  0   \n",
       "4                       0                 1                  0   \n",
       "\n",
       "   Property_Area_Rural  Property_Area_Semiurban  Property_Area_Urban  \n",
       "0                    0                        0                    1  \n",
       "1                    1                        0                    0  \n",
       "2                    0                        0                    1  \n",
       "3                    0                        0                    1  \n",
       "4                    0                        0                    1  "
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(train['Total_Income']);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['Total_Income_log'] = np.log(train['Total_Income'])  #reducing skewness in total_income col\n",
    "sns.distplot(train['Total_Income_log']);\n",
    "test['Total_Income_log'] = np.log(test['Total_Income'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# EMI feature\n",
    "train['EMI']=(train['LoanAmount']/train['Loan_Amount_Term'])*1000\n",
    "test['EMI']=(test['LoanAmount']/test['Loan_Amount_Term'])*1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      361.111111\n",
       "1      355.555556\n",
       "2      183.333333\n",
       "3      333.333333\n",
       "4      391.666667\n",
       "          ...    \n",
       "609    197.222222\n",
       "610    222.222222\n",
       "611    702.777778\n",
       "612    519.444444\n",
       "613    369.444444\n",
       "Name: EMI, Length: 614, dtype: float64"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.EMI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYoAAAEKCAYAAAAMzhLIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzt3X2QXNV95vHvr7unZ0YjCb0NrxJI\ngCARSQxEIcT2JtjEQXZ2LTuGssiuw+6yhbOGrWSTSgxJlTdxmcQ4L6SSxXbhgE0ogyCY2LMpJRTm\nJQ5+EQiQbSRZMEggRghpEEIjjWb69bd/3NOjptXdc3umZ0Zz5/lUTanv7XNP39s96mfOOfeea+6O\niIhII6mZ3gERETm5KShERKQpBYWIiDSloBARkaYUFCIi0pSCQkREmlJQiIhIUwoKERFpSkEhIiJN\nZWZ6B9ph2bJlvnLlypneDRGRWeXZZ5990917xyuXiKBYuXIlW7ZsmendEBGZVczs1Tjl1PUkIiJN\nKShERKQpBYWIiDSloBARkaZiBYWZrTOznWbWb2Y313m+08weCM9vNrOVVc/dEtbvNLOrwrouM3va\nzH5oZtvM7E+ryq8KdbwU6sxO/jBFRGSixg0KM0sDdwAfBNYA15rZmppi1wOH3P184HbgtrDtGmAD\ncBGwDvhiqC8HvN/d3wVcDKwzs8tDXbcBt7v7auBQqFtERGZInBbFZUC/u+9y9zywEVhfU2Y9cE94\n/BBwpZlZWL/R3XPuvhvoBy7zyNFQviP8eNjm/aEOQp0fmeCxiYhIG8QJirOA16qWB8K6umXcvQgc\nBpY229bM0ma2FTgAPOrum8M2b4c6Gr2WiIhMozhBYXXW1d5ou1GZhtu6e8ndLwaWA5eZ2c/EfK3o\nBc1uMLMtZrZlcHCw4c5Phf1Do6z93KPsfOPItL6uiMhMiBMUA8CKquXlwOuNyphZBjgFeCvOtu7+\nNvAk0RjGm8CiUEej16psd6e7r3X3tb29416B3lavvDnMm0fzvDx4dPzCIiKzXJygeAZYHc5GyhIN\nTvfVlOkDrguPrwYed3cP6zeEs6JWAauBp82s18wWAZhZN/CrwE/CNk+EOgh1fmvihzc1jhVKAIzk\nSzO8JyIiU2/cuZ7cvWhmNwGPAGngbnffZmafBba4ex9wF3CvmfUTtSQ2hG23mdmDwHagCNzo7iUz\nOwO4J5wBlQIedPd/Di/5aWCjmX0OeD7UfVKpBMRIQUEhIskXa1JAd98EbKpZ95mqx6PANQ22vRW4\ntWbdj4BLGpTfRXSm1UnrWAiKUQWFiMwBujJ7AkbyxfCvgkJEkk9BMQHH1PUkInOIgmICFBQiMpco\nKCagEhAaoxCRuUBBMQHHNEYhInOIgmIC1PUkInOJgmICjl9HUZ7hPRERmXoKigkYG6NQ15OIzAEK\niglQ15OIzCUKignQFB4iMpcoKCZAZz2JyFyioJiAEc31JCJziIJiAsamGVdQiMgcoKCYgOrB7OgW\nGiIiyaWgaFGp7OSLZTozKdwhV9S1FCKSbAqKFlUGspf2ZAGNU4hI8ikoWlQZyF4yPwoKjVOISNIp\nKFpUGZ9Y0tMJ6BRZEUk+BUUL7tu8h288NwDA0EgBgIef2zuTuyQiMuUUFC3Kh8HrnmwagEJJg9ki\nkmwKihblQzD0dGYAKJR0eqyIJJuCokWFYm1QqEUhIsmmoGjRWIsim3nHsohIUikoWpQvRl1NPZ1h\njEIX3IlIwikoWnTiGIWCQkSSTUHRouNnPWkwW0TmhlhBYWbrzGynmfWb2c11nu80swfC85vNbGXV\nc7eE9TvN7KqwboWZPWFmO8xsm5n9TlX5PzGzvWa2Nfx8aPKH2T6FUpm0GZ0d0VunMQoRSbrMeAXM\nLA3cAXwAGACeMbM+d99eVex64JC7n29mG4DbgI+b2RpgA3ARcCbwbTO7ACgCv+/uz5nZAuBZM3u0\nqs7b3f0v23WQ7ZQvlunIGCkzMilT15OIJF6cFsVlQL+773L3PLARWF9TZj1wT3j8EHClmVlYv9Hd\nc+6+G+gHLnP3fe7+HIC7HwF2AGdN/nCmXr5UJpuO3rZsJqWgEJHEixMUZwGvVS0PcOKX+lgZdy8C\nh4GlcbYN3VSXAJurVt9kZj8ys7vNbHG9nTKzG8xsi5ltGRwcjHEY7ZEvlukIQdGRTlEoaoxCRJIt\nTlBYnXW1346NyjTd1szmA98Aftfdh8LqLwHnARcD+4C/qrdT7n6nu69197W9vb3Nj6CNCqUy2czx\noNAYhYgkXZygGABWVC0vB15vVMbMMsApwFvNtjWzDqKQ+Lq7P1wp4O773b3k7mXgK0RdXyeNfLGq\n6ymtMQoRSb44QfEMsNrMVplZlmhwuq+mTB9wXXh8NfC4R/cI7QM2hLOiVgGrgafD+MVdwA53/+vq\niszsjKrFjwIvtHpQUylf06JQUIhI0o171pO7F83sJuARIA3c7e7bzOyzwBZ37yP60r/XzPqJWhIb\nwrbbzOxBYDvRmU43unvJzN4LfAL4sZltDS/1R+6+CfiCmV1M1EX1CvDJNh7vpBVKZRZ2dQDQkUmN\nXVchIpJU4wYFQPgC31Sz7jNVj0eBaxpseytwa826p6g/foG7fyLOPs2UfPGdLYrhXHGG90hEZGrp\nyuwW5Us+NkbRkTa1KEQk8RQULSpUtSiyGqMQkTlAQdECd6dQqrmOQnM9iUjCKShaUCg5DjrrSUTm\nFAVFCyoX12XT0Th8R8Yolp1SWa0KEUkuBUULKjcpqh6jABgplGZsn0REppqCogWVFkX1GAXASF5B\nISLJpaBoQb6mRVEJilG1KEQkwRQULTg+RnH8OgpQ15OIJJuCogUNxyjU9SQiCaagaMEJYxQZDWaL\nSPIpKFowNkZRO5itoBCRBFNQtGCsRZF55xjFqLqeRCTBFBQtKNS0KHQdhYjMBQqKFuRLZYzjLQl1\nPYnIXKCgaEG+GE0IGN2gTxfcicjcoKBoQaHkY+MTEM31BLrgTkSSTUHRgmiK8eM35kubkTJ1PYlI\nsikoWlAoOx2p42+ZmdGRTjGS11TjIpJcCooWFEtlMul33uq7I51Si0JEEk1B0YJi2ccGsCs60qYx\nChFJNAVFCwqlMpnUiS2KY/niDO2RiMjUU1C0oFjyE7qespkUIwWNUYhIcikoWhCd9fTOtyybTjGi\nFoWIJJiCogXFsp/Q9ZTNpBjOaYxCRJIrVlCY2Toz22lm/WZ2c53nO83sgfD8ZjNbWfXcLWH9TjO7\nKqxbYWZPmNkOM9tmZr9TVX6JmT1qZi+FfxdP/jDbo1ivRZHRWU8ikmzjBoWZpYE7gA8Ca4BrzWxN\nTbHrgUPufj5wO3Bb2HYNsAG4CFgHfDHUVwR+391/GrgcuLGqzpuBx9x9NfBYWD4pFOqNUWgwW0QS\nLk6L4jKg3913uXse2AisrymzHrgnPH4IuNKiCZHWAxvdPefuu4F+4DJ33+fuzwG4+xFgB3BWnbru\nAT4ysUNrv2K5TCZVc3psJsUxdT2JSILFCYqzgNeqlgc4/qV+Qhl3LwKHgaVxtg3dVJcAm8Oq09x9\nX6hrH3BqjH2ccu5OseTvmMIDoDOd4lihhLvP0J6JiEytOEFhddbVfis2KtN0WzObD3wD+F13H4qx\nL8df0OwGM9tiZlsGBwdb2XRCCiXHgUydMYpS2cduaiQikjRxgmIAWFG1vBx4vVEZM8sApwBvNdvW\nzDqIQuLr7v5wVZn9ZnZGKHMGcKDeTrn7ne6+1t3X9vb2xjiMyRktRt1LHXUuuAPU/SQiiRUnKJ4B\nVpvZKjPLEg1O99WU6QOuC4+vBh73qC+mD9gQzopaBawGng7jF3cBO9z9r5vUdR3wrVYPairkwkV1\ntS2KzjDt+DGd+SQiCZUZr4C7F83sJuARIA3c7e7bzOyzwBZ37yP60r/XzPqJWhIbwrbbzOxBYDvR\nmU43unvJzN4LfAL4sZltDS/1R+6+Cfg88KCZXQ/sAa5p5wFPVK7SoqidFDBTuXmRznwSkWQaNygA\nwhf4ppp1n6l6PEqDL3R3vxW4tWbdU9Qfv8DdDwJXxtmv6TRaaVGkTrwyG9BFdyKSWLoyO6ZKi6Le\nXE8Ax3Q7VBFJKAVFTJUWRb25ngBddCciiaWgiGmsRVFnridQi0JEkktBEVOuUYtibDBbQSEiyaSg\niKnhGEVlMFtdTyKSUAqKmHLFBmc9qetJRBJOQRFT5b7YtddRZFJGytT1JCLJpaCIaaxFUTNGYWbM\ny2bU9SQiiaWgiGmsRZE68TrBedm0WhQiklgKipgazfUEUVBojEJEkkpBEVOuWCZlkK7ToujOZnTB\nnYgkloIiptFC6YQznip61KIQkQRTUMSUK5ZPuIaiojubZlhBISIJpaCIabRQOuGq7IpoMFtdTyKS\nTAqKmHLF8gnzPFX0ZDPqehKRxFJQxNSsRdGtMQoRSTAFRUzNxih6OnXWk4gkl4Iiplyx1LDrqbsj\nzWihTKns07xXIiJTT0ER02ih3HQwG2CkoO4nEUkeBUVMzQaz53VGtx5X95OIJJGCIqZcoVR3+g6A\neR2hRaEBbRFJIAVFTLli+YQpxisqXU/DOQWFiCSPgiKmXLFJiyJ0PY0U1PUkIsmjoIhptFCuO8U4\nqEUhIsmmoIipWYuiO4xR6KI7EUkiBUUMpbJTKHnTC+5AXU8ikkyxgsLM1pnZTjPrN7Ob6zzfaWYP\nhOc3m9nKquduCet3mtlVVevvNrMDZvZCTV1/YmZ7zWxr+PnQxA+vPXLFyt3tml9Hoa4nEUmicYPC\nzNLAHcAHgTXAtWa2pqbY9cAhdz8fuB24LWy7BtgAXASsA74Y6gP4WlhXz+3ufnH42dTaIbXf6Njd\n7RpPMw46PVZEkilOi+IyoN/dd7l7HtgIrK8psx64Jzx+CLjSzCys3+juOXffDfSH+nD37wBvteEY\npty4LQqNUYhIgsUJirOA16qWB8K6umXcvQgcBpbG3Laem8zsR6F7anGM8lMqN06LIpNOkc2kdGW2\niCRSnKCo9+1YO/tdozJxtq31JeA84GJgH/BXdXfK7AYz22JmWwYHB8epcnJGQ4ui0VlPoNuhikhy\nxQmKAWBF1fJy4PVGZcwsA5xC1K0UZ9t3cPf97l5y9zLwFUJXVZ1yd7r7Wndf29vbG+MwJq7Somh0\nHQXAPN28SEQSKk5QPAOsNrNVZpYlGpzuqynTB1wXHl8NPO7uHtZvCGdFrQJWA083ezEzO6Nq8aPA\nC43KTpfRwvgtiujmRep6EpHkyYxXwN2LZnYT8AiQBu52921m9llgi7v3AXcB95pZP1FLYkPYdpuZ\nPQhsB4rAje5eAjCz+4ErgGVmNgD8H3e/C/iCmV1M1EX1CvDJdh7wROSKoUXRYIwC1PUkIsk1blAA\nhFNUN9Ws+0zV41Hgmgbb3grcWmf9tQ3KfyLOPk2nSlCM16LQ6bEikkS6MjuGsa6nccYohtX1JCIJ\npKCI4XjXU+O3a55aFCKSUAqKGI4PZjdrUaTVohCRRFJQxDDWomhwZTbo9FgRSS4FRQxxWxQj+RLR\nWcEiIsmhoIhh7KynpoPZaYplJ18qT9duiYhMCwVFDLliiWwmRTTPYX3zsuGeFOp+EpGEUVDEkCuU\n6co0f6vmh5sXHRnVgLaIJIuCIoZcsURnR7ppmYXdUVAMjRamY5dERKaNgiKG0UKZro7mb9XCrg5A\nLQoRSR4FRQy5YonOzHgtiigohkbUohCRZFFQxJCL0aJY0FXpelKLQkSSRUERw2icFkWXWhQikkwK\nihhyhTKd45z1VGlRaIxCRJJGQRHDaLFE1zhnPWXSKXqyaZ31JCKJo6CIYbwWxX2b93Df5j1k0im2\n7nmb+zbvmca9ExGZWgqKGOK0KAA6MylGCroyW0SSRUERQ5wxCoDujjSjRQWFiCSLgiKGXDFeUHR1\npMdmmhURSQoFRQyjhXhdT93ZNKMFzR4rIsmioBiHu7fQokhp9lgRSRwFxTgqg9PzwuywzXRl0uSK\nunmRiCSLgmIcw7koKHqy43c9dXWkKTu6eZGIJIqCYhzDuehK654YLYruMI6hcQoRSRIFxTiG81FQ\nVO5g10xXaHXoWgoRSRIFxTiOhcHpns44XU/R2zmqAW0RSZBYQWFm68xsp5n1m9nNdZ7vNLMHwvOb\nzWxl1XO3hPU7zeyqqvV3m9kBM3uhpq4lZvaomb0U/l088cObvErXU6wWRZhhVhfdiUiSjBsUZpYG\n7gA+CKwBrjWzNTXFrgcOufv5wO3AbWHbNcAG4CJgHfDFUB/A18K6WjcDj7n7auCxsDxjKi2K+S2N\nUSgoRCQ54rQoLgP63X2Xu+eBjcD6mjLrgXvC44eAK83MwvqN7p5z991Af6gPd/8O8Fad16uu6x7g\nIy0cT9sdHWtRxOh6Ghuj0GC2iCRHnKA4C3itankgrKtbxt2LwGFgacxta53m7vtCXfuAU+sVMrMb\nzGyLmW0ZHByMcRgTc6yFs566wkV5alGISJLECQqrs672irJGZeJsOyHufqe7r3X3tb29ve2osq7h\n0PUUp0WRSafoSJuCQkQSJU5QDAArqpaXA683KmNmGeAUom6lONvW2m9mZ4S6zgAOxNjHKXMsXySd\nslhTeEA0oK2gEJEkifPt9wyw2sxWmVmWaHC6r6ZMH3BdeHw18LhH81j0ARvCWVGrgNXA0+O8XnVd\n1wHfirGPU2Y4V6InmyYachlfV0daYxQikijjBkUYc7gJeATYATzo7tvM7LNm9uFQ7C5gqZn1A79H\nOFPJ3bcBDwLbgX8FbnT3EoCZ3Q98H7jQzAbM7PpQ1+eBD5jZS8AHwvKMGc4VY41PVHR1pNSiEJFE\nifUN6O6bgE016z5T9XgUuKbBtrcCt9ZZf22D8geBK+Ps13Q4li/FGp+o6M6mx06pFRFJAl2ZPY7h\nfGstik6NUYhIwigoxnEsV6InxlXZFd0aoxCRhFFQjONorhhrnqeKyu1QdU8KEUkKBcU4juWLseZ5\nqujuSFEqR3fFExFJAgXFOIbzpdZaFGHge2i0MFW7JCIyrRQU4ziWK7Y0RlGZQXZopDhVuyQiMq0U\nFE2Uy85wvhTrftkVXR1qUYhIsigomqjcqS7O/bIrusPNi4ZGFBQikgwKiibGboM6oRaFup5EJBkU\nFE0cy7XeoqgMZh9R15OIJISCoomjLdyLoqIymH1YXU8ikhAKiiYqcza1ctZTNpOiuyPNvrdHp2q3\nRESmlYKiieNjFPG7ngCWzs/yysHhqdglEZFpp6Bo4vgYRfwWBcCSHgWFiCSHgqKJSouilSuzAZb2\ndLL30Ah5TeMhIgmgoGhiuDKY3WKLYtn8LGWH1w4dm4rdEhGZVgqKJiqD2S2PUfRkAXhV3U8ikgAK\niiaGc0UyKSObbu1tWjK/E4BX3lSLQkRmPwVFE8fyJXo6M5hZS9v1ZNMs6MpoQFtEEkFB0cTRXLGl\nq7IrzIyVS3t45aBaFCIy+ykomjiWL7Y0z1O1c5bO0xiFiCSCgqKJ4VxpQi0KgJVLexg4NEKhpFNk\nRWR2U1A0cSxfbGmep2orl/VQKjsDh0bavFciItNLQdHEcK7U0v2yq61cOg9AA9oiMuspKJoYzhdb\nviq74pylPQC88qaCQkRmt1hBYWbrzGynmfWb2c11nu80swfC85vNbGXVc7eE9TvN7Krx6jSzr5nZ\nbjPbGn4untwhTtxkWhTL5mfpyaZ5VWc+icgsN+63oJmlgTuADwADwDNm1ufu26uKXQ8ccvfzzWwD\ncBvwcTNbA2wALgLOBL5tZheEbZrV+Qfu/lAbjm9C7tu8B4huZ/raW8fGllthZqxc1qOuJxGZ9eK0\nKC4D+t19l7vngY3A+poy64F7wuOHgCstukptPbDR3XPuvhvoD/XFqXNGld3Jl8pkMxPvnVu5tIcX\n3zhCuext3DMRkekV51vwLOC1quWBsK5uGXcvAoeBpU22Ha/OW83sR2Z2u5l1xtjHtiuEmV87JxEU\nv7rmVF4/PMq/vTjYrt0SEZl2cb4F681fUfsncqMyra4HuAX4KeAXgCXAp+vulNkNZrbFzLYMDrb/\nizgXrn+YTIvi13/2TE5f2MXfP7WrXbslIjLt4nwLDgArqpaXA683KmNmGeAU4K0m2zas0933eSQH\nfJWom+oE7n6nu69197W9vb0xDqM1lXtJtDohYLVsJsV1717Jd/sPsu31w+3aNRGRaRXnW/AZYLWZ\nrTKzLNHgdF9NmT7guvD4auBxd/ewfkM4K2oVsBp4ulmdZnZG+NeAjwAvTOYAJyo/1vU0sdNjK37z\nsrOZl01z11O727FbIiLTbtyznty9aGY3AY8AaeBud99mZp8Ftrh7H3AXcK+Z9RO1JDaEbbeZ2YPA\ndqAI3OjuJYB6dYaX/LqZ9RJ1T20Ffrt9hxtfrji5rqfqM6XetWIR33r+dS44dQG/fcV5bdk/EZHp\nEusiAXffBGyqWfeZqsejwDUNtr0VuDVOnWH9++Ps01TLF6ObFk1mMLviF1cu4fsvH2THG0OTrktE\nZLrpyuwGJtuiqNa7oJOFXRl2DeqaChGZfRQUDeTbGBRmxnm989k1eJRo6EZEZPZQUDRwNFcEYP4E\nZ4+tdW5vD8P5Ei/uP9qW+kREpouCooGh0QLdHWk6JnF6bLVze+cD8L2X32xLfSIi00VB0cDQSJEF\nXe1pTQAsnpdl8bwOvvfywbbVKSIyHRQUDQyNFjilu6OtdZ7XO5/Nuw5S0txPIjKLKCgaGBopsKCr\nvUFxbu98hkaLbH9dp8mKyOyhoKij7M7RXJGF3e3reoJoQBs0TiEis4uCoo6juSJlh4VtblEs7Org\n/FPn88TOA22tV0RkKiko6jgyEp0a2+6gAPhPP3cmP9j1FgOHdOc7EZkdFBR1DI0WANre9QTwG5dG\nt914+Lm9ba9bRGQqKCjqGAuKKWhRrFgyj8vPXcLDzw3oKm0RmRUUFHUMjRQxoKdNV2XX+tily3nl\n4DGeffXQlNQvItJOCoo6hkYLLOjKkE7VuxHf5H3oZ89gXjbNQ88OTEn9IiLtNDV/Ms9yR0bbfw1F\nReU+FReetoB/en4vP33GQjrSKX7zF8+ektcTEZkstSjqGBopsrDNV2XXuvScxeSKZV18JyInPQVF\nHUOjBRa2cZ6nelYt62FRdwfP7dE4hYic3BQUNUYLJY7lS1PW9VSRMuOSsxfRf+Aoh0cKU/paIiKT\noaCoMXgkB8ApU3ANRa1Lz16MA1tfe3vKX0tEZKIUFDXeGBoFmPIWBcDS+Z2cs2Qez716SNdUiMhJ\nS2c91dgfgmKqB7MrLj17Mf+0dS+3PPxj3jya54LT5vMHV12I2dScmisi0iq1KGrsH4q6nqZ6MLvi\nZ5efQndHmoef38uL+4/wxSdf5q6ndk/La4uIxKEWRY39Q6NkUkZ3R3paXq+rI80tH/opUmYY8PXN\ne/izTTs4eDTPiiXzdH2FiMw4tShq7B8aZWF3x7R2/WRSqSgozPjYpcs5pbuD+5/Zw0i+dELZYqnM\nV7+7m099/Vmu+IsnuP5rz2h8Q0SmlIKixt5DI9PW7VRPdzbNhl84myMjRR6qmTjw0HCe6776NH/6\n/7bzwt4hlvRkeewnB3iqXzdCEpGpo6CosvONIzy75xCrlvXM6H6sWDKPq37mdHbsG+Lu774CwPdf\nPsiH73iKZ3Yf4i+u/jm+84fv4/4bLuf0hV3838f7Z3R/RSTZYgWFma0zs51m1m9mN9d5vtPMHgjP\nbzazlVXP3RLW7zSzq8ar08xWhTpeCnVmJ3eI8f3t4y8xryPNe85bNl0v2dB7zlvKT5++gM//yw4+\n9qXvce1XfkCx5Gz85OVcs3YF923ewzee3cvPn7OYzbvf4s837RibR0pEpJ1svP5tM0sDLwIfAAaA\nZ4Br3X17VZlPAT/n7r9tZhuAj7r7x81sDXA/cBlwJvBt4IKwWd06zexB4GF332hmXwZ+6O5faraP\na9eu9S1btrR67O/w4v4jXPU33+FTV5zHWYvmTaqudhnJl7jjyX4KpTK/ckEvv7ByCR3pd2Z7vljm\nC4/8hOWLu/m1Nadz1uJu9h4a4eBwjjeP5jl4NMfhkQLvu/BUPvkr59G7oLPh6720/wjf3LqXJ3cO\ncunZi7n+vatYOcHW1bF8kXnZ41147k6h5GQz7WnElstOaopm9x2Pu+v0ZUkEM3vW3deOWy5GUPwS\n8CfuflVYvgXA3f+8qswjocz3zSwDvAH0AjdXl62UC5udUCfweWAQON3di7Wv3chEg+LQcJ5CqUxX\nNs0tD/+YJ39ygKc+/X7+5YU3Wq5rquSLZVKpaMC7kSd2HuDR7fvHllMGPdkMPZ0Z5ndmSKWg/8BR\nspkUH37XmaxduYTVp85nz1vH2L5viO2vD7Fj3xHePJojZfCuFYvYtneIQrnMqqU9HB4pcGS0yPyu\nDKd0d5BJGaWy09OZ4X0X9vKBNadz2sJOzIzv7zrIPd97hWdfPcQFp83nfReeysHhPP/24iBDIwU+\n/K4z+a1fWsm5vT10pFN0pK3ul2657JTcKZXDjzvFkvPd/je59wev8uyrh/gPq5fxsUuXc/GKRSzu\nydKTTbf0Be7uuEPJnbI75TLRv1WPK8+5wwt7D3P/06/x5M4DXHL2Ij56yXLefd5Sli3obPm1Reqp\n/iOkWCpzcDjPS/uP8u0d+/nOS4Ms6+nkslVLuOTsRVxw2gLOWtQ9qT+Y4gZFnFHbs4DXqpYHgF9s\nVCZ8wR8Glob1P6jZ9qzwuF6dS4G33b1Yp3zb3f7tF/mH7786tvypK85jcc+09XTFEucv8PectwwD\nFs/LsnxxN4t7sqRqvrTePJrjyZ0H6Pvh6zy45fh9MNIp47QFnZy9ZB7vPm8pF525kAVdHay7qMAP\ndr3F4JFRli3opCuTIlcscyxfwj36a/7wSIG/e7yfv60ZI1nSk+WXV/cy8PYxvvLvu+jMpDn/1Pmc\ns2Qe39y6l3+suQ9HNp0inbLoizmEQrO/XxbP6+Dnz1nMzjeO8L/uf35svRkYhDPIwMIpx5Xl2gCY\nyMliy+Z3csnZi3nl4DB/9E8/HltfG3jV735ltVWtnYpMadfJb870nkVnjP9mtPJ+Vb8Ptcfyzuea\n7dOJr1vZz8o696j+6N/jf3jikuN2AAAGJklEQVR4VR3R72Tl9/H44+gPkmibsjP2xwhE/ydTBsXS\n8b3PpIxze3vIFUt86d9eplSOnunqSPHl//LzXHHhqTHfnYmJExT1PqLa97hRmUbr6337NSt/4k6Z\n3QDcEBaPmtnOeuVa8enb4NOwDJhTpxHteufipI//VeD5mnU/mUyFderf2sb6ajQ9/leBZ6futU8G\nc+73v8ZJe/wvN1j/vs9Nqtpz4hSKExQDwIqq5eXA6w3KDISup1OAt8bZtt76N4FFZpYJrYp6rwWA\nu98J3Blj/1tiZlviNMWSSsev49fxz93jbyTOyOIzwOpwNlIW2AD01ZTpA64Lj68GHvdo8KMP2BDO\niloFrAaeblRn2OaJUAehzm9N/PBERGSyxm1RhDGHm4BHgDRwt7tvM7PPAlvcvQ+4C7jXzPqJWhIb\nwrbbwllM24EicKO7lwDq1Rle8tPARjP7HFEPxl3tO1wREWnVuGc9zTVmdkPo1pqTdPw6fh3/3D3+\nRhQUIiLSlKbwEBGRphQUwXjTlMxWZrbCzJ4wsx1mts3MfiesX2Jmj4apUh41s8VhvZnZ34b34Udm\ndmlVXdeF8i+Z2XWNXvNkZGZpM3vezP45LNedKmYi09Gc7MxskZk9ZGY/Cb8HvzSXPn8z+9/hd/8F\nM7vfzLrm0uffFtFFInP7h2hA/WXgXCAL/BBYM9P71aZjOwO4NDxeQDR1yhrgC8DNYf3NwG3h8YeA\nfyG6puVyYHNYv4TokoslwOLwePFMH18L78PvAfcB/xyWHwQ2hMdfBv5nePwp4Mvh8QbggfB4Tfi9\n6ARWhd+X9EwfV8xjvwf4H+FxFlg0Vz5/ogt2dwPdVZ/7f51Ln387ftSiiFwG9Lv7LnfPAxuB9TO8\nT23h7vvc/bnw+Aiwg+g/z3qiLxDCvx8Jj9cD/+CRHxBd13IGcBXwqLu/5e6HgEeBddN4KBNmZsuB\nXwf+Piwb8H7goVCk9vgr78tDwJWh/Hpgo7vn3H030E/0e3NSM7OFwC8Tzh5097y7v80c+vyJzu7s\nDtd4zQP2MUc+/3ZRUETqTVMyZVOHzJTQjL4E2Ayc5u77IAoToDIHQKP3Yja/R38D/CFQDsvNpop5\nx3Q0QPV0NLPx+M8lmj/tq6Hr7e/NrIc58vm7+17gL4E9RAFxmOji+rny+beFgiISe+qQ2crM5gPf\nAH7X3YeaFa2zrqXpVU4mZvYfgQPuXj3zRrNjSdTxE/01fSnwJXe/BBgmTNbZQKKOP4y9rCfqLjoT\n6AE+WKdoUj//tlBQROJMUzJrmVkHUUh83d0fDqv3hy4Fwr8HwvpG78VsfY/eA3zYzF4h6lJ8P1EL\nY1HoioB3HsvYcVr86WhOZgPAgLtvDssPEQXHXPn8fxXY7e6D7l4AHgbezdz5/NtCQRGJM03JrBT6\nV+8Cdrj7X1c9VT3tSvVUKX3Ab4WzXy4HDoeuiUeAXzOzxeGvtF8L605q7n6Luy9395VEn+vj7v6f\naTxVTKvT0ZzU3P0N4DUzuzCsupJopoQ58fkTdTldbmbzwv+FyvHPic+/bWZ6NP1k+SE62+NForMZ\n/nim96eNx/Veoibyj4gmXd0ajnUp8BjwUvh3SShvwB3hffgxsLaqrv9ONIjXD/y3mT62CbwXV3D8\nrKdzif6j9wP/CHSG9V1huT88f27V9n8c3pedwAdn+nhaOO6LgS3hd+CbRGctzZnPH/hTogmMXwDu\nJTpzac58/u340ZXZIiLSlLqeRESkKQWFiIg0paAQEZGmFBQiItKUgkJERJpSUIhMgpmVzGxr1c/N\nYf2TZrYnnLtfKftNMzsaHq80sxdmar9FWjHurVBFpKkRd7+4wXNvE10Z/pSZLSKayVdk1lGLQmTq\nbCTcPx74DaLpI0RmHQWFyOR013Q9fbzquceAXzazNOHeBjOziyKTo64nkclp1vVUAp4CPk5045xX\nqoYsRGYNtShEptZG4O+I7qgmMispKESm1r8Dfw7cP9M7IjJR6noSmZxuM9tatfyv7j52YyCPZt38\ny+nfLZH20eyxIiLSlLqeRESkKQWFiIg0paAQEZGmFBQiItKUgkJERJpSUIiISFMKChERaUpBISIi\nTf1/GMMLxvpEHY0AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fdd1df429b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(train['EMI']);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Balance Income feature\n",
    "train['Balance Income']=train['Total_Income']-(train['EMI']) \n",
    "test['Balance Income']=test['Total_Income']-(test['EMI'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(train['Balance Income']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = train.drop('Loan_Status',1)\n",
    "y = train.Loan_Status                # Save target variable in separate dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=1\n",
    "kf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True)\n",
    "for train_index,test_index in kf.split(X,y):\n",
    "     print('\\n{} of kfold {}'.format(i,kf.n_splits))\n",
    "     xtr,xvl = X.loc[train_index],X.loc[test_index]\n",
    "     ytr,yvl = y[train_index],y[test_index]\n",
    "    \n",
    "     model = LogisticRegression(random_state=1)\n",
    "     model.fit(xtr, ytr)\n",
    "     pred_test = model.predict(xvl)\n",
    "     score = accuracy_score(yvl,pred_test)\n",
    "     print('accuracy_score',score)\n",
    "     i+=1\n",
    "pred_test = model.predict(test)\n",
    "pred=model.predict_proba(xvl)[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\WINDOWS\\\\system32'"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import tree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's fit the decision tree model with 5 folds of cross validation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "1 of kfold 5\n",
      "accuracy_score 0.7398373983739838\n",
      "\n",
      "2 of kfold 5\n",
      "accuracy_score 0.7479674796747967\n",
      "\n",
      "3 of kfold 5\n",
      "accuracy_score 0.6504065040650406\n",
      "\n",
      "4 of kfold 5\n",
      "accuracy_score 0.6829268292682927\n",
      "\n",
      "5 of kfold 5\n",
      "accuracy_score 0.7213114754098361\n"
     ]
    }
   ],
   "source": [
    "i=1\n",
    "kf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True)\n",
    "for train_index,test_index in kf.split(X,y):\n",
    "     print('\\n{} of kfold {}'.format(i,kf.n_splits))\n",
    "     xtr,xvl = X.loc[train_index],X.loc[test_index]\n",
    "     ytr,yvl = y[train_index],y[test_index]\n",
    "    \n",
    "     model = tree.DecisionTreeClassifier(random_state=1)\n",
    "     model.fit(xtr, ytr)\n",
    "     pred_test = model.predict(xvl)\n",
    "     score = accuracy_score(yvl,pred_test)\n",
    "     print('accuracy_score',score)\n",
    "     i+=1\n",
    "pred_test = model.predict(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "1 of kfold 5\n",
      "accuracy_score 0.8292682926829268\n",
      "\n",
      "2 of kfold 5\n",
      "accuracy_score 0.8373983739837398\n",
      "\n",
      "3 of kfold 5\n",
      "accuracy_score 0.7804878048780488\n",
      "\n",
      "4 of kfold 5\n",
      "accuracy_score 0.7967479674796748\n",
      "\n",
      "5 of kfold 5\n",
      "accuracy_score 0.7704918032786885\n"
     ]
    }
   ],
   "source": [
    "i=1\n",
    "kf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True)\n",
    "for train_index,test_index in kf.split(X,y):\n",
    "     print('\\n{} of kfold {}'.format(i,kf.n_splits))\n",
    "     xtr,xvl = X.loc[train_index],X.loc[test_index]\n",
    "     ytr,yvl = y[train_index],y[test_index]\n",
    "    \n",
    "     model = RandomForestClassifier(random_state=1, max_depth=10)\n",
    "     model.fit(xtr, ytr)\n",
    "     pred_test = model.predict(xvl)\n",
    "     score = accuracy_score(yvl,pred_test)\n",
    "     print('accuracy_score',score)\n",
    "     i+=1\n",
    "pred_test = model.predict(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Provide range for max_depth from 1 to 20 with an interval of 2 and from 1 to 200 with an interval of 20 for n_estimators\n",
    "paramgrid = {'max_depth': list(range(1, 20, 2)), 'n_estimators': list(range(1, 200, 20))}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],\n",
       " 'n_estimators': [1, 21, 41, 61, 81, 101, 121, 141, 161, 181]}"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paramgrid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using grisearchcv to find optimum hyperparameter for our dataset\n",
    "\n",
    "grid_search=GridSearchCV(RandomForestClassifier(random_state=1),paramgrid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_cv, y_train, y_cv = train_test_split(X,y, test_size =0.3, random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score=nan,\n",
       "             estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,\n",
       "                                              class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features='auto',\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              max_samples=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              n_estimators=100, n_jobs=None,\n",
       "                                              oob_score=False, random_state=1,\n",
       "                                              verbose=0, warm_start=False),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'max_depth': [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],\n",
       "                         'n_estimators': [1, 21, 41, 61, 81, 101, 121, 141, 161,\n",
       "                                          181]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the grid search model\n",
    "grid_search.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
       "                       criterion='gini', max_depth=5, max_features='auto',\n",
       "                       max_leaf_nodes=None, max_samples=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=41,\n",
       "                       n_jobs=None, oob_score=False, random_state=1, verbose=0,\n",
       "                       warm_start=False)"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Estimating the optimized value\n",
    "grid_search.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "1 of kfold 5\n",
      "accuracy_score 0.8211382113821138\n",
      "\n",
      "2 of kfold 5\n",
      "accuracy_score 0.8373983739837398\n",
      "\n",
      "3 of kfold 5\n",
      "accuracy_score 0.7967479674796748\n",
      "\n",
      "4 of kfold 5\n",
      "accuracy_score 0.7886178861788617\n",
      "\n",
      "5 of kfold 5\n",
      "accuracy_score 0.7868852459016393\n"
     ]
    }
   ],
   "source": [
    "i=1\n",
    "kf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True)\n",
    "for train_index,test_index in kf.split(X,y):\n",
    "     print('\\n{} of kfold {}'.format(i,kf.n_splits))\n",
    "     xtr,xvl = X.loc[train_index],X.loc[test_index]\n",
    "     ytr,yvl = y[train_index],y[test_index]\n",
    "    \n",
    "     model = RandomForestClassifier(random_state=1, max_depth=5, n_estimators=41)\n",
    "     model.fit(xtr, ytr)\n",
    "     pred_test = model.predict(xvl)\n",
    "     score = accuracy_score(yvl,pred_test)\n",
    "     print('accuracy_score',score)\n",
    "     i+=1\n",
    "pred_test = model.predict(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost import XGBClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "1 of kfold 5\n",
      "accuracy_score 0.8130081300813008\n",
      "\n",
      "2 of kfold 5\n",
      "accuracy_score 0.7804878048780488\n",
      "\n",
      "3 of kfold 5\n",
      "accuracy_score 0.7886178861788617\n",
      "\n",
      "4 of kfold 5\n",
      "accuracy_score 0.7560975609756098\n",
      "\n",
      "5 of kfold 5\n",
      "accuracy_score 0.7540983606557377\n"
     ]
    }
   ],
   "source": [
    "i=1\n",
    "kf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True)\n",
    "for train_index,test_index in kf.split(X,y):\n",
    "     print('\\n{} of kfold {}'.format(i,kf.n_splits))\n",
    "     xtr,xvl = X.loc[train_index],X.loc[test_index]\n",
    "     ytr,yvl = y[train_index],y[test_index]\n",
    "    \n",
    "     model = XGBClassifier(n_estimators=50, max_depth=4)\n",
    "     model.fit(xtr, ytr)\n",
    "     pred_test = model.predict(xvl)\n",
    "     score = accuracy_score(yvl,pred_test)\n",
    "     print('accuracy_score',score)\n",
    "     i+=1\n",
    "pred_test = model.predict(test)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
